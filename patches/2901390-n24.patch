diff --git a/src/Plugin/Field/FieldWidget/InlineParagraphsWidget.php b/src/Plugin/Field/FieldWidget/InlineParagraphsWidget.php
index ce8d108..616771c 100644
--- a/src/Plugin/Field/FieldWidget/InlineParagraphsWidget.php
+++ b/src/Plugin/Field/FieldWidget/InlineParagraphsWidget.php
@@ -1338,6 +1338,35 @@ class InlineParagraphsWidget extends WidgetBase {
     return parent::extractFormValues($items, $form, $form_state);
   }
 
+  /**
+   * Initializes form language code values.
+   *
+   * @see  ContetEntityForm::initFormLangcodes().
+   *
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  protected function initFormLangcodes(FormStateInterface $form_state, EntityInterface $host) {
+
+    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
+    $entity_repository = \Drupal::service('entity.repository');
+
+    // Store the entity default language to allow checking whether the form is
+    // dealing with the original entity or a translation.
+    if (!$form_state->has('entity_default_langcode')) {
+      $form_state->set('entity_default_langcode', $host->getUntranslated()->language()->getId());
+    }
+    // This value might have been explicitly populated to work with a particular
+    // entity translation. If not we fall back to the most proper language based
+    // on contextual information.
+    if (!$form_state->has('langcode')) {
+      // Imply a 'view' operation to ensure users edit entities in the same
+      // language they are displayed. This allows to keep contextual editing
+      // working also for multilingual entities.
+      $form_state->set('langcode', $entity_repository->getTranslationFromContext($host)->language()->getId());
+    }
+  }
+
   /**
    * Initializes the translation form state.
    *
@@ -1349,6 +1378,9 @@ class InlineParagraphsWidget extends WidgetBase {
       return;
     }
     $this->isTranslating = FALSE;
+
+    $this->initFormLangcodes($form_state, $host);
+
     if (!$host->isTranslatable()) {
       return;
     }
diff --git a/src/Plugin/Field/FieldWidget/ParagraphsWidget.php b/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
index 7f615be..fb87c89 100644
--- a/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
+++ b/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
@@ -2284,6 +2284,35 @@ class ParagraphsWidget extends WidgetBase {
     return parent::extractFormValues($items, $form, $form_state);
   }
 
+  /**
+   * Initializes form language code values.
+   *
+   * @see  ContetEntityForm::initFormLangcodes().
+   *
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  protected function initFormLangcodes(FormStateInterface $form_state, ContentEntityInterface $host) {
+
+    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
+    $entity_repository = \Drupal::service('entity.repository');
+
+    // Store the entity default language to allow checking whether the form is
+    // dealing with the original entity or a translation.
+    if (!$form_state->has('entity_default_langcode')) {
+      $form_state->set('entity_default_langcode', $host->getUntranslated()->language()->getId());
+    }
+    // This value might have been explicitly populated to work with a particular
+    // entity translation. If not we fall back to the most proper language based
+    // on contextual information.
+    if (!$form_state->has('langcode')) {
+      // Imply a 'view' operation to ensure users edit entities in the same
+      // language they are displayed. This allows to keep contextual editing
+      // working also for multilingual entities.
+      $form_state->set('langcode', $entity_repository->getTranslationFromContext($host)->language()->getId());
+    }
+  }
+
   /**
    * Determine if widget is in translation.
    *
@@ -2297,6 +2326,9 @@ class ParagraphsWidget extends WidgetBase {
       return;
     }
     $this->isTranslating = FALSE;
+
+    $this->initFormLangcodes($form_state, $host);
+
     if (!$host->isTranslatable()) {
       return;
     }
