diff --git a/media_embed_view_mode_restrictions/README.md b/media_embed_view_mode_restrictions/README.md
new file mode 100644
index 0000000..4b9366b
--- /dev/null
+++ b/media_embed_view_mode_restrictions/README.md
@@ -0,0 +1,84 @@
+INTRODUCTION
+------------
+
+This module extends the Media Embed functionality provided by core's Media
+module. Media Embed provides an editor plugin and a text format filter that
+allow for media entities to be embedded inside CKEditor. It allows site
+builders to determine which media bundles can be embedded (e.g. images and
+remote videos but not files). When rendered, media entities are displayed with
+a designated view mode. Media Embed allows site builders to control which view
+modes can be selected by end users for display; however, the list of allowed
+view modes is controlled on a per-text format basis, not on a per-bundle basis.
+This module modifies Media Embed to allow view modes to be designated on a
+per-bundle basis.
+
+For example, a site builder has created two media bundles: 1) image and
+2) remote video. For the images, two view modes are needed: 1) 'Narrow'
+and 2) 'Wide'. For remote videos, only one view mode is needed, 'Remote Video'.
+Without this module, end users would see all three view modes as options when
+embedding media in CKEditor for both images and remotes videos. Ideally, when
+embedding an image, a content editor would only be given 'Narrow' and 'Wide'
+as options; and when embedding a remote video, a content editor wouldn't see
+any options because 'Remote Video' is the only view mode allowed for remote
+videos. This module fills that functionality gap.
+
+This module is maintained as a sub-module of the Media Library Extras project.
+
+ * For a full description of the module, visit the project page:
+   https://www.drupal.org/project/media_library_extras
+
+ * To submit bug reports and feature suggestions, or track changes:
+   https://www.drupal.org/project/issues/media_library_extras
+
+REQUIREMENTS
+------------
+
+Drupal 8.8+ is required for this module.
+
+This module requires the following modules:
+ * CKEditor (provided by core)
+ * Filter (provided by core)
+ * Media (provided by core)
+ * Text Editor (provided by core)
+
+INSTALLATION
+------------
+ 
+ * Install as you would normally install a contributed Drupal module. Visit:
+[https://www.drupal.org/docs/8/extending-drupal-8/installing-drupal-8-modules](https://www.drupal.org/docs/8/extending-drupal-8/installing-drupal-8-modules)
+for further information.
+
+ * On installation, existing Media Embed configuration is retained.
+ 
+ * On un-installation, per-bundle configuration is removed.
+
+CONFIGURATION
+-------------
+
+Media Embed configuration remains unchanged following installation. To
+configure Media Embed for a given text format/editor, navigate to its
+configuration page (/admin/config/content/formats/manage/{name}).
+
+ * The _Media types selectable in the Media Library_ setting is unchanged.
+ * The _Default view mode_ field now exists on a per-bundle basis.
+ * The _View modes selectable in the 'Edit media' dialog_ field now exists on
+   a per-bundle basis.
+
+RELATED ISSUES
+-----------
+
+ * [CKEditor Media: Only allow enabled view modes](https://www.drupal.org/project/drupal/issues/3097416)
+ * [Optionally allow choosing a view mode for embedded media in EditorMediaDialog](https://www.drupal.org/project/drupal/issues/3074608)
+
+MAINTAINERS
+-----------
+
+Current maintainers:
+ * Chris Burge - https://www.drupal.org/user/1826152
+ * Adam Honeich (phenaproxima) - https://www.drupal.org/user/205645
+ * Bryan Sharpe (b_sharpe) - https://www.drupal.org/user/2512258
+
+This module was been sponsored by:
+ * UNIVERSITY OF NEBRASKA-LINCOLN
+   https://www.drupal.org/university-of-nebraska
+   https://dxg.unl.edu
diff --git a/media_embed_view_mode_restrictions/js/plugins/drupalmedia/plugin.js b/media_embed_view_mode_restrictions/js/plugins/drupalmedia/plugin.js
new file mode 100644
index 0000000..da26463
--- /dev/null
+++ b/media_embed_view_mode_restrictions/js/plugins/drupalmedia/plugin.js
@@ -0,0 +1,334 @@
+/**
+* DO NOT EDIT THIS FILE.
+* See the following change record for more information,
+* https://www.drupal.org/node/2815083
+* @preserve
+**/
+
+(function (jQuery, Drupal, CKEDITOR) {
+    function getFocusedWidget(editor) {
+      var widget = editor.widgets.focused;
+  
+      if (widget && widget.name === 'drupalmedia') {
+        return widget;
+      }
+      return null;
+    }
+  
+    function linkCommandIntegrator(editor) {
+      if (!editor.plugins.drupallink) {
+        return;
+      }
+  
+      CKEDITOR.plugins.drupallink.registerLinkableWidget('drupalmedia');
+  
+      editor.getCommand('drupalunlink').on('exec', function (evt) {
+        var widget = getFocusedWidget(editor);
+  
+        if (!widget) {
+          return;
+        }
+  
+        widget.setData('link', null);
+  
+        this.refresh(editor, editor.elementPath());
+  
+        evt.cancel();
+      });
+  
+      editor.getCommand('drupalunlink').on('refresh', function (evt) {
+        var widget = getFocusedWidget(editor);
+  
+        if (!widget) {
+          return;
+        }
+  
+        this.setState(widget.data.link ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED);
+  
+        evt.cancel();
+      });
+  
+      if (editor.contextMenu) {
+        editor.contextMenu.addListener(function () {
+          var widget = getFocusedWidget(editor);
+  
+          if (!widget) {
+            return;
+          }
+  
+          if (widget.data.link) {
+            return {
+              link: CKEDITOR.TRISTATE_OFF,
+              unlink: CKEDITOR.TRISTATE_OFF
+            };
+          }
+          return {};
+        });
+      }
+    }
+  
+    CKEDITOR.plugins.add('drupalmedia', {
+      requires: 'widget',
+  
+      beforeInit: function beforeInit(editor) {
+        var dtd = CKEDITOR.dtd;
+  
+        dtd['drupal-media'] = { '#': 1 };
+  
+        Object.keys(dtd).forEach(function (tagName) {
+          if (dtd[tagName].div) {
+            dtd[tagName]['drupal-media'] = 1;
+          }
+        });
+        dtd.a['drupal-media'] = 1;
+  
+        editor.widgets.add('drupalmedia', {
+          allowedContent: {
+            'drupal-media': {
+              attributes: {
+                '!data-entity-type': true,
+                '!data-entity-uuid': true,
+                'data-view-mode': true,
+                'data-align': true,
+                'data-caption': true,
+                alt: true,
+                title: true
+              },
+              classes: {}
+            }
+          },
+  
+          requiredContent: new CKEDITOR.style({
+            element: 'drupal-media',
+            attributes: {
+              'data-entity-type': '',
+              'data-entity-uuid': ''
+            }
+          }),
+  
+          pathName: Drupal.t('Embedded media'),
+  
+          editables: {
+            caption: {
+              selector: 'figcaption',
+              allowedContent: 'a[!href]; em strong cite code br',
+              pathName: Drupal.t('Caption')
+            }
+          },
+  
+          getLabel: function getLabel() {
+            if (this.data.label) {
+              return this.data.label;
+            }
+            return Drupal.t('Embedded media');
+          },
+          upcast: function upcast(element, data) {
+            var attributes = element.attributes;
+  
+            if (element.name !== 'drupal-media' || attributes['data-entity-type'] !== 'media' || attributes['data-entity-uuid'] === undefined) {
+              return;
+            }
+            data.attributes = CKEDITOR.tools.copy(attributes);
+            data.hasCaption = data.attributes.hasOwnProperty('data-caption');
+  
+            if (data.hasCaption && data.attributes['data-caption'] === '') {
+              data.attributes['data-caption'] = ' ';
+            }
+            data.label = null;
+            data.link = null;
+            if (element.parent.name === 'a') {
+              data.link = CKEDITOR.tools.copy(element.parent.attributes);
+  
+              Object.keys(element.parent.attributes).forEach(function (attrName) {
+                if (attrName.indexOf('data-cke-') !== -1) {
+                  delete data.link[attrName];
+                }
+              });
+            }
+  
+            var hostEntityLangcode = document.getElementById(editor.name).getAttribute('data-media-embed-host-entity-langcode');
+            if (hostEntityLangcode) {
+              data.hostEntityLangcode = hostEntityLangcode;
+            }
+            return element;
+          },
+          destroy: function destroy() {
+            this._tearDownDynamicEditables();
+          },
+          data: function data(event) {
+            var _this = this;
+  
+            if (this.oldData) {
+              if (!this.data.hasCaption && this.oldData.hasCaption) {
+                delete this.data.attributes['data-caption'];
+              } else if (this.data.hasCaption && !this.data.attributes['data-caption']) {
+                this.data.attributes['data-caption'] = ' ';
+              }
+            }
+  
+            if (this._previewNeedsServerSideUpdate()) {
+              editor.fire('lockSnapshot');
+              this._tearDownDynamicEditables();
+  
+              this._loadPreview(function (widget) {
+                widget._setUpDynamicEditables();
+                widget._setUpEditButton();
+                editor.fire('unlockSnapshot');
+              });
+            }
+  
+            if (this.oldData) {
+              Object.keys(this.oldData.attributes).forEach(function (attrName) {
+                _this.element.removeAttribute(attrName);
+              });
+            }
+  
+            this.element.setAttributes(this.data.attributes);
+  
+            this.oldData = CKEDITOR.tools.clone(this.data);
+          },
+          downcast: function downcast() {
+            var downcastElement = new CKEDITOR.htmlParser.element('drupal-media', this.data.attributes);
+            if (this.data.link) {
+              var link = new CKEDITOR.htmlParser.element('a', this.data.link);
+              link.add(downcastElement);
+              return link;
+            }
+            return downcastElement;
+          },
+          _setUpDynamicEditables: function _setUpDynamicEditables() {
+            var _this2 = this;
+  
+            if (this.initEditable('caption', this.definition.editables.caption)) {
+              var captionEditable = this.editables.caption;
+  
+              captionEditable.setAttribute('data-placeholder', Drupal.t('Enter caption here'));
+  
+              this.captionObserver = new MutationObserver(function () {
+                var mediaAttributes = CKEDITOR.tools.clone(_this2.data.attributes);
+                mediaAttributes['data-caption'] = captionEditable.getData();
+                _this2.setData('attributes', mediaAttributes);
+              });
+              this.captionObserver.observe(captionEditable.$, {
+                characterData: true,
+                attributes: true,
+                childList: true,
+                subtree: true
+              });
+  
+              if (captionEditable.$.childNodes.length === 1 && captionEditable.$.childNodes.item(0).nodeName === 'BR') {
+                captionEditable.$.removeChild(captionEditable.$.childNodes.item(0));
+              }
+            }
+          },
+          _setUpEditButton: function _setUpEditButton() {
+            if (this.element.findOne('.media-embed-error')) {
+              return;
+            }
+  
+            var isElementNode = function isElementNode(n) {
+              return n.type === CKEDITOR.NODE_ELEMENT;
+            };
+  
+            var embeddedMediaContainer = this.data.hasCaption ? this.element.findOne('figure') : this.element;
+            var embeddedMedia = embeddedMediaContainer.getFirst(isElementNode);
+  
+            if (this.data.link) {
+              embeddedMedia = embeddedMedia.getFirst(isElementNode);
+            }
+  
+            embeddedMedia.setStyle('position', 'relative');
+  
+            var editButton = CKEDITOR.dom.element.createFromHtml(Drupal.theme('mediaEmbedEditButton'));
+            embeddedMedia.getFirst().insertBeforeMe(editButton);
+  
+            var widget = this;
+            this.element.findOne('.media-library-item__edit').on('click', function (event) {
+              var saveCallback = function saveCallback(values) {
+                event.cancel();
+                editor.fire('saveSnapshot');
+                if (values.hasOwnProperty('attributes')) {
+                  CKEDITOR.tools.extend(values.attributes, widget.data.attributes);
+  
+                  Object.keys(values.attributes).forEach(function (prop) {
+                    if (values.attributes[prop] === false || prop === 'data-align' && values.attributes[prop] === 'none') {
+                      delete values.attributes[prop];
+                    }
+                  });
+                }
+                widget.setData({
+                  attributes: values.attributes,
+                  hasCaption: !!values.hasCaption
+                });
+                editor.fire('saveSnapshot');
+              };
+  
+              Drupal.ckeditor.openDialog(editor, Drupal.url('editor/dialog/media/' + editor.config.drupal.format), widget.data, saveCallback, {});
+            });
+  
+            this.element.findOne('.media-library-item__edit').on('keydown', function (event) {
+              var returnKey = 13;
+  
+              var spaceBar = 32;
+              if (typeof event.data !== 'undefined') {
+                var keypress = event.data.getKey();
+                if (keypress === returnKey || keypress === spaceBar) {
+                  event.sender.$.click();
+                }
+  
+                event.data.$.stopPropagation();
+                event.data.$.stopImmediatePropagation();
+              }
+            });
+          },
+          _tearDownDynamicEditables: function _tearDownDynamicEditables() {
+            if (this.captionObserver) {
+              this.captionObserver.disconnect();
+            }
+          },
+          _previewNeedsServerSideUpdate: function _previewNeedsServerSideUpdate() {
+            if (!this.ready) {
+              return true;
+            }
+  
+            return this._hashData(this.oldData) !== this._hashData(this.data);
+          },
+          _hashData: function _hashData(data) {
+            var dataToHash = CKEDITOR.tools.clone(data);
+  
+            delete dataToHash.attributes['data-caption'];
+  
+            delete dataToHash.label;
+  
+            if (dataToHash.link) {
+              delete dataToHash.link.href;
+            }
+            return JSON.stringify(dataToHash);
+          },
+          _loadPreview: function _loadPreview(callback) {
+            var _this3 = this;
+  
+            jQuery.get({
+              url: Drupal.url('media/' + editor.config.drupal.format + '/preview'),
+              data: {
+                text: this.downcast().getOuterHtml(),
+                uuid: this.data.attributes['data-entity-uuid']
+              },
+              dataType: 'html',
+              success: function success(previewHtml, textStatus, jqXhr) {
+                _this3.element.setHtml(previewHtml);
+                _this3.setData('label', jqXhr.getResponseHeader('Drupal-Media-Label'));
+                callback(_this3);
+              },
+              error: function error() {
+                _this3.element.setHtml(Drupal.theme('mediaEmbedPreviewError'));
+              }
+            });
+          }
+        });
+      },
+      afterInit: function afterInit(editor) {
+        linkCommandIntegrator(editor);
+      }
+    });
+  })(jQuery, Drupal, CKEDITOR);
\ No newline at end of file
diff --git a/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.info.yml b/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.info.yml
new file mode 100644
index 0000000..f35fff6
--- /dev/null
+++ b/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.info.yml
@@ -0,0 +1,10 @@
+name: Media Embed View Mode Restrictions
+type: module
+description: 'Allows views modes to be restricted on a per-bundle basis for media embedding'
+package: Media
+dependencies:
+  - drupal:ckeditor (>=8.8)
+  - drupal:filter (>=8.8)
+  - drupal:media (>=8.8)
+  - drupal:media_library (>=8.8)
+core_version_requirement: ^8.8 || ^9
diff --git a/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.install b/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.install
new file mode 100644
index 0000000..10ab346
--- /dev/null
+++ b/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.install
@@ -0,0 +1,89 @@
+<?php
+
+/**
+ * @file
+ * Provides install, uninstall, and update functions.
+ */
+
+/**
+ * Implements hook_install().
+ */
+function media_embed_view_mode_restrictions_install() {
+  // Generate a list of text format filters where the Media Embed filter is
+  // enabled and report this to the site builder.
+  //
+  // Load config factory.
+  /** @var \Drupal\Core\Config\ConfigFactory */
+  $config_factory = \Drupal::configFactory();
+  // Load all text formats.
+  $filter_formats = filter_formats();
+
+  // Create array to keep track of which filter formats have the media_embed
+  // filter enabled.
+  $affected_filter_formats = [];
+  // Loop through all text formats.
+  foreach ($filter_formats as $id => $filter_format) {
+    /** @var \Drupal\Core\Config\Config */
+    $config = $config_factory->getEditable('filter.format.' . $id);
+    $filters = $config->get('filters');
+
+    // Check is Media Embed filter is enabled.
+    if (isset($filters['media_embed'])) {
+      // Mark filter as affected.
+      $affected_filter_formats[$id] = $filter_format->get('name');
+    }
+  }
+
+  // Build string for modified filters.
+  $affected_filter_formats_string = '';
+  foreach ($affected_filter_formats as $id => $affected_filter) {
+    $affected_filter_formats_string .= ' ' . $affected_filter . ',';
+  }
+  $affected_filter_formats_string = trim($affected_filter_formats_string, " ,");
+
+  \Drupal::messenger()->addMessage(t('The following text formats need to be configured for bundle-specific Media Embed configuration: @filters', ['@filters' => $affected_filter_formats_string]));
+  \Drupal::logger('The following text formats need to be configured for bundle-specific Media Embed configuration: @filters', ['@filters' => $affected_filter_formats_string]);
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function media_embed_view_mode_restrictions_uninstall() {
+  // This uninstall function removes bundle-specific configuration for
+  // Media Embed. It leaves things as if this module were never installed.
+  //
+  // Load config factory.
+  /** @var \Drupal\Core\Config\ConfigFactory */
+  $config_factory = \Drupal::configFactory();
+  // Load all text formats.
+  $filter_formats = filter_formats();
+
+  // Create array to keep track of which filter formats have been modified.
+  $modified_filter_formats = [];
+  // Loop through all text formats.
+  foreach ($filter_formats as $id => $filter_format) {
+    /** @var \Drupal\Core\Config\Config */
+    $config = $config_factory->getEditable('filter.format.' . $id);
+    $filters = $config->get('filters');
+
+    // Check is Media Embed filter is enabled.
+    if (isset($filters['media_embed'])) {
+      // Remove per-bundle configuration.
+      unset($filters['media_embed']['settings']['bundle_view_modes']);
+      $config->set('filters', $filters)->save();
+
+      // Mark filter as modified.
+      $modified_filter_formats[$id] = $filter_format->get('name');
+    }
+  }
+
+  // Build string for modified filters.
+  $modified_filter_formats_string = '';
+  foreach ($modified_filter_formats as $id => $modified_filter) {
+    $modified_filter_formats_string .= ' ' . $modified_filter . ',';
+  }
+  $modified_filter_formats_string = trim($modified_filter_formats_string, " ,");
+
+  \Drupal::messenger()->addMessage(t('Media Embed View Mode Restrictions has remove its Media Embed configuration for the following text formats: @filters', ['@filters' => $modified_filter_formats_string]));
+  \Drupal::logger('media_embed_view_mode_restrictions')->notice('Media Embed View Mode Restrictions has remove its Media Embed configuration for the following text formats: @filters', ['@filters' => $modified_filter_formats_string]);
+}
diff --git a/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.module b/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.module
new file mode 100644
index 0000000..d067c85
--- /dev/null
+++ b/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.module
@@ -0,0 +1,114 @@
+<?php
+
+/**
+ * @file
+ * This is the module extends core's MediaEmbed functionality.
+ */
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\media_embed_view_mode_restrictions\Plugin\Filter\MediaEmbedDecorator;
+
+/**
+ * Implements hook_filter_info_alter().
+ */
+function media_embed_view_mode_restrictions_filter_info_alter(&$info) {
+  // Replace filter class with custom class that decorates core MediaEmbed.
+  $info['media_embed']['class'] = MediaEmbedDecorator::class;
+}
+
+/**
+ * Implements hook_config_schema_info_alter().
+ */
+function media_embed_view_mode_restrictions_config_schema_info_alter(&$definitions) {
+  // Add this module's schema to filter_settings.media_embed.
+  $definitions['filter_settings.media_embed']['mapping']['bundle_view_modes'] = [
+    'type' => 'sequence',
+    'label' => 'View mode configuration per bundle',
+    'sequence' => [
+      'type' => 'mapping',
+      'label' => 'Bundle configuration',
+      'mapping' => [
+        'default_view_mode' => [
+          'type' => 'string',
+          'label' => 'Default view mode',
+        ],
+        'allowed_view_modes' => [
+          'type' => 'sequence',
+          'label' => 'Allowed view modes',
+          'sequence' => [
+            'type' => 'string',
+            'label' => 'Allowed view modes',
+          ],
+        ],
+      ],
+    ],
+  ];
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ *
+ * Restrict view modes available on 'editor_media_dialog' form.
+ */
+function media_embed_view_mode_restrictions_form_editor_media_dialog_alter(&$form, FormStateInterface $form_state) {
+  $build_info = $form_state->getBuildInfo();
+  /** @var \Drupal\editor\Entity\Editor */
+  $editor = $build_info['args'][0];
+  /** @var \Drupal\filter\FilterPluginCollection */
+  $filters = $editor->getFilterFormat()->filters();
+  /** @var \Drupal\media_embed_view_mode_restrictions\MediaEmbed */
+  $media_embed_filter_settings = $filters->get('media_embed')->settings;
+
+  // Load media entity by UUID and get bundle.
+  $storage = $form_state->getStorage();
+  $media_uuid = $storage['media_embed_element']['data-entity-uuid'];
+  $media_loaded_by_uuid = \Drupal::entityTypeManager()->getStorage('media')->loadByProperties(['uuid' => $media_uuid]);
+  /** @var \Drupal\media\Entity\Media */
+  $media_loaded_by_uuid = reset($media_loaded_by_uuid);
+  $bundle = $media_loaded_by_uuid->bundle();
+
+  // Check if settings exist for bundle.
+  if (isset($media_embed_filter_settings['bundle_view_modes'][$bundle])) {
+    // Get allowed view modes.
+    $bundle_settings = $media_embed_filter_settings['bundle_view_modes'][$bundle];
+    $view_mode_options = $bundle_settings['allowed_view_modes'];
+    $default_view_mode = $bundle_settings['default_view_mode'];
+    // \Drupal\media\Form\EditorMediaDialog::buildForm stores
+    // the default view mode in $form_state as
+    // 'filter_default_view_mode'; thus, it needs overridden with the
+    // bundle-specific default view mode.
+    // This can be removed when https://www.drupal.org/node/3109289 is fixed.
+    $form_state->set('filter_default_view_mode', $default_view_mode);
+  }
+  else {
+    $view_mode_options = $media_embed_filter_settings['allowed_view_modes'];
+    $default_view_mode = $media_embed_filter_settings['default_view_mode'];
+  }
+
+  // Load media view modes.
+  /** @var \Drupal\Core\Entity\EntityDisplayRepository */
+  $entity_display_repo = \Drupal::service('entity_display.repository');
+  $media_view_modes = $entity_display_repo->getViewModes('media');
+
+  // Loop through allowed view modes and set label.
+  foreach ($view_mode_options as $id => $view_mode) {
+    $view_mode_options[$id] = $media_view_modes[$id]['label'];
+  }
+
+  // Override view_mode field.
+  $form['view_mode']['#options'] = $view_mode_options;
+  $form['view_mode']['#access'] = count($view_mode_options) >= 2;
+  $form['view_mode']['#default_value'] = (isset($storage['media_embed_element']['data-view-mode'])) ? $storage['media_embed_element']['data-view-mode'] : $default_view_mode;
+}
+
+/**
+ * Implements hook_ckeditor_plugin_info_alter().
+ *
+ * This can be removed when https://www.drupal.org/node/3109289 is fixed.
+ */
+function media_embed_view_mode_restrictions_ckeditor_plugin_info_alter(array &$plugins) {
+  // Override plugin class, so that we can replace the plugin.js file.
+  if (isset($plugins['drupalmedia'])) {
+    $plugins['drupalmedia']['class'] = 'Drupal\media_embed_view_mode_restrictions\Plugin\CKEditorPlugin\DrupalMediaDecorator';
+  }
+}
diff --git a/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.services.yml b/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.services.yml
new file mode 100644
index 0000000..d2c7ce3
--- /dev/null
+++ b/media_embed_view_mode_restrictions/media_embed_view_mode_restrictions.services.yml
@@ -0,0 +1,11 @@
+services:
+  # This can be removed when https://www.drupal.org/node/3109289 is fixed.
+  media_embed_view_mode_restrictions.route_subscriber:
+    class: Drupal\media_embed_view_mode_restrictions\Routing\RouteSubscriber
+    tags:
+      - { name: event_subscriber }
+  # Decorates core media_library.opener.editor service.
+  media_embed_view_mode_restrictions.media_library.opener.editor:
+    decorates: media_library.opener.editor
+    class: Drupal\media_embed_view_mode_restrictions\MediaLibraryEditorOpenerDecorator
+    arguments: ['@entity_type.manager']
diff --git a/media_embed_view_mode_restrictions/src/Form/EditorMediaDialogDecorator.php b/media_embed_view_mode_restrictions/src/Form/EditorMediaDialogDecorator.php
new file mode 100644
index 0000000..26364ca
--- /dev/null
+++ b/media_embed_view_mode_restrictions/src/Form/EditorMediaDialogDecorator.php
@@ -0,0 +1,160 @@
+<?php
+
+namespace Drupal\media_embed_view_mode_restrictions\Form;
+
+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\editor\EditorInterface;
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Ajax\HtmlCommand;
+use Drupal\editor\Ajax\EditorDialogSave;
+use Drupal\Core\Ajax\CloseModalDialogCommand;
+use Drupal\filter\Plugin\FilterInterface;
+use Drupal\media\MediaInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\media\Form\EditorMediaDialog;
+
+/**
+ * Decorates the EditorMediaDialog filter plugin provided by core Media module.
+ *
+ * This can be removed when https://www.drupal.org/node/3109289 is fixed.
+ */
+final class EditorMediaDialogDecorator extends FormBase {
+
+  /**
+   * The decorated form instance.
+   *
+   * @var \Drupal\media\Form\EditorMediaDialog
+   */
+  protected $decorated;
+
+  /**
+   * The entity repository.
+   *
+   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   */
+  protected $entityRepository;
+
+  /**
+   * The entity display repository.
+   *
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   */
+  protected $entityDisplayRepository;
+
+  /**
+   * Constructs a EditorMediaDialog object.
+   *
+   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   *   The entity repository.
+   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   *   The entity display repository.
+   * @param \Drupal\media\Form\EditorMediaDialog $decorated
+   *   Provides a media embed dialog for text editors.
+   */
+  public function __construct(EntityRepositoryInterface $entity_repository, EntityDisplayRepositoryInterface $entity_display_repository, EditorMediaDialog $decorated) {
+    $this->entityRepository = $entity_repository;
+    $this->entityDisplayRepository = $entity_display_repository;
+    $this->decorated = $decorated;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('entity.repository'),
+      $container->get('entity_display.repository'),
+      EditorMediaDialog::create($container)
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return $this->decorated->getFormId();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state, EditorInterface $editor = NULL) {
+    return $this->decorated->buildForm($form, $form_state, $editor);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    $response = new AjaxResponse();
+
+    // When the `alt` attribute is set to two double quotes, transform it to the
+    // empty string: two double quotes signify "empty alt attribute". See above.
+    if (trim($form_state->getValue(['attributes', 'alt'], '')) === '""') {
+      $form_state->setValue(['attributes', 'alt'], '""');
+    }
+
+    // The `alt` attribute is optional: if it isn't set, the default value
+    // simply will not be overridden. It's important to set it to FALSE
+    // instead of unsetting the value.  This way we explicitly inform
+    // the client side about the new value.
+    if ($form_state->hasValue(['attributes', 'alt']) && trim($form_state->getValue(['attributes', 'alt'])) === '') {
+      $form_state->setValue(['attributes', 'alt'], FALSE);
+    }
+
+    if ($form_state->getErrors()) {
+      unset($form['#prefix'], $form['#suffix']);
+      $form['status_messages'] = [
+        '#type' => 'status_messages',
+        '#weight' => -10,
+      ];
+      $response->addCommand(new HtmlCommand('#editor-media-dialog-form', $form));
+    }
+    else {
+      // Only send back the relevant values.
+      $values = [
+        'hasCaption' => $form_state->getValue('hasCaption'),
+        'attributes' => $form_state->getValue('attributes'),
+      ];
+      $response->addCommand(new EditorDialogSave($values));
+      $response->addCommand(new CloseModalDialogCommand());
+    }
+
+    return $response;
+  }
+
+  /**
+   * Gets the default value for the view mode form element.
+   *
+   * @param array $view_mode_options
+   *   The array of options for the view mode form element.
+   * @param \Drupal\filter\Plugin\FilterInterface $media_embed_filter
+   *   The media embed filter.
+   * @param string $media_element_view_mode_attribute
+   *   The data-view-mode attribute on the <drupal-media> element.
+   *
+   * @return string|null
+   *   The default value for the view mode form element.
+   */
+  public static function getViewModeDefaultValue(array $view_mode_options, FilterInterface $media_embed_filter, $media_element_view_mode_attribute) {
+    return static::$decorated->getViewModeDefaultValue($view_mode_options, $media_embed_filter, $media_element_view_mode_attribute);
+  }
+
+  /**
+   * Gets the name of an image media item's source field.
+   *
+   * @param \Drupal\media\MediaInterface $media
+   *   The media item being embedded.
+   *
+   * @return string|null
+   *   The name of the image source field configured for the media item, or
+   *   NULL if the source field is not an image field.
+   */
+  protected function getMediaImageSourceFieldName(MediaInterface $media) {
+    return $this->decorated->getMediaImageSourceFieldName($media);
+  }
+
+}
diff --git a/media_embed_view_mode_restrictions/src/MediaLibraryEditorOpenerDecorator.php b/media_embed_view_mode_restrictions/src/MediaLibraryEditorOpenerDecorator.php
new file mode 100644
index 0000000..5d2251d
--- /dev/null
+++ b/media_embed_view_mode_restrictions/src/MediaLibraryEditorOpenerDecorator.php
@@ -0,0 +1,99 @@
+<?php
+
+namespace Drupal\media_embed_view_mode_restrictions;
+
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\editor\Ajax\EditorDialogSave;
+use Drupal\media_library\MediaLibraryState;
+use Drupal\media_library\MediaLibraryEditorOpener;
+use Drupal\media_library\MediaLibraryOpenerInterface;
+
+/**
+ * Decorates MediaLibraryEditorOpener class provided by Media Library module.
+ */
+final class MediaLibraryEditorOpenerDecorator implements MediaLibraryOpenerInterface {
+
+  /**
+   * The decorated media library opener for text editors.
+   *
+   * @var \Drupal\media_library\MediaLibraryEditorOpener
+   */
+  protected $decorated;
+
+  /**
+   * The text format entity storage.
+   *
+   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   */
+  protected $filterStorage;
+
+  /**
+   * The media storage.
+   *
+   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   */
+  protected $mediaStorage;
+
+  /**
+   * The MediaLibraryEditorOpener constructor.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   */
+  public function __construct(EntityTypeManagerInterface $entity_type_manager) {
+    $this->filterStorage = $entity_type_manager->getStorage('filter_format');
+    $this->mediaStorage = $entity_type_manager->getStorage('media');
+    $this->decorated = new MediaLibraryEditorOpener($entity_type_manager);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function checkAccess(MediaLibraryState $state, AccountInterface $account) {
+    return $this->decorated->checkAccess($state, $account);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getSelectionResponse(MediaLibraryState $state, array $selected_ids) {
+    $selected_media = $this->mediaStorage->load(reset($selected_ids));
+
+    $response = new AjaxResponse();
+    $values = [
+      'attributes' => [
+        'data-entity-type' => 'media',
+        'data-entity-uuid' => $selected_media->uuid(),
+        'data-align' => 'center',
+      ],
+    ];
+
+    // Set 'data-view-mode' attribute if a default view mode is configured
+    // for the filter format.
+    $media_library_opener_parameters = $state->get('media_library_opener_parameters');
+    $filter_format = $this->filterStorage->load($media_library_opener_parameters['filter_format_id']);
+    if ($filter_format && $filter_format->filters('media_embed')) {
+      $filter = $filter_format->filters('media_embed');
+      $bundle = $selected_media->bundle();
+
+      // Check if bundle-specific default view mode is configured.
+      if (isset($filter->settings['bundle_view_modes'][$bundle])) {
+        $default_view_mode = $filter->settings['bundle_view_modes'][$bundle]['default_view_mode'];
+      }
+      else {
+        $default_view_mode = $filter->settings['default_view_mode'];
+      }
+
+      if ($default_view_mode) {
+        $values['attributes']['data-view-mode'] = $default_view_mode;
+      }
+    }
+
+    $response->addCommand(new EditorDialogSave($values));
+
+    return $response;
+  }
+
+}
diff --git a/media_embed_view_mode_restrictions/src/Plugin/CKEditorPlugin/DrupalMediaDecorator.php b/media_embed_view_mode_restrictions/src/Plugin/CKEditorPlugin/DrupalMediaDecorator.php
new file mode 100644
index 0000000..e644048
--- /dev/null
+++ b/media_embed_view_mode_restrictions/src/Plugin/CKEditorPlugin/DrupalMediaDecorator.php
@@ -0,0 +1,118 @@
+<?php
+
+namespace Drupal\media_embed_view_mode_restrictions\Plugin\CKEditorPlugin;
+
+use Drupal\ckeditor\CKEditorPluginContextualInterface;
+use Drupal\ckeditor\CKEditorPluginCssInterface;
+use Drupal\Core\Extension\ModuleExtensionList;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Plugin\PluginBase;
+use Drupal\editor\Entity\Editor;
+use Drupal\media\Plugin\CKEditorPlugin\DrupalMedia;
+
+/**
+ * Decorates the core drupalmedia plugin.
+ *
+ * This can be removed when https://www.drupal.org/node/3109289 is fixed.
+ */
+final class DrupalMediaDecorator extends PluginBase implements ContainerFactoryPluginInterface, CKEditorPluginContextualInterface, CKEditorPluginCssInterface {
+
+
+  /**
+   * The decorated DrupalMedia CKEditor plugin.
+   *
+   * @var \Drupal\media\Plugin\CKEditorPlugin\DrupalMedia
+   */
+  protected $decorated;
+
+  /**
+   * The module extension list.
+   *
+   * @var \Drupal\Core\Extension\ModuleExtensionList
+   */
+  protected $moduleExtensionList;
+
+  /**
+   * Constructs a new DrupalMedia plugin object.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param array $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\media\Plugin\CKEditorPlugin\DrupalMedia $decorated
+   *   The decorated DrupalMedia CKEditor plugin.
+   * @param \Drupal\Core\Extension\ModuleExtensionList $extension_list_module
+   *   The module extension list.
+   */
+  public function __construct(array $configuration, $plugin_id, array $plugin_definition, DrupalMedia $decorated, ModuleExtensionList $extension_list_module) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->decorated = $decorated;
+    $this->moduleExtensionList = $extension_list_module;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      DrupalMedia::create($container, $configuration, $plugin_id, $plugin_definition),
+      $container->get('extension.list.module')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isInternal() {
+    return $this->decorated->isInternal();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDependencies(Editor $editor) {
+    return $this->decorated->getDependencies($editor);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getLibraries(Editor $editor) {
+    return $this->decorated->getLibraries($editor);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFile() {
+    return $this->moduleExtensionList->getPath('media_embed_view_mode_restrictions') . '/js/plugins/drupalmedia/plugin.js';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConfig(Editor $editor) {
+    return $this->decorated->getConfig($editor);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isEnabled(Editor $editor) {
+    return $this->decorated->isEnabled($editor);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getCssFiles(Editor $editor) {
+    return $this->decorated->getCssFiles($editor);
+  }
+
+}
diff --git a/media_embed_view_mode_restrictions/src/Plugin/Filter/MediaEmbedDecorator.php b/media_embed_view_mode_restrictions/src/Plugin/Filter/MediaEmbedDecorator.php
new file mode 100644
index 0000000..2872310
--- /dev/null
+++ b/media_embed_view_mode_restrictions/src/Plugin/Filter/MediaEmbedDecorator.php
@@ -0,0 +1,180 @@
+<?php
+
+namespace Drupal\media_embed_view_mode_restrictions\Plugin\Filter;
+
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\filter\Plugin\FilterBase;
+use Drupal\filter\Plugin\FilterInterface;
+use Drupal\media\Plugin\Filter\MediaEmbed;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Decorates the MediaEmbed filter plugin provided by core's Media module.
+ */
+final class MediaEmbedDecorator extends FilterBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * The decorated plugin instance.
+   *
+   * @var \Drupal\filter\Plugin\FilterInterface
+   */
+  private $decorated;
+
+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * MediaEmbedDecorator constructor.
+   *
+   * @param array $configuration
+   *   The plugin configuration.
+   * @param string $plugin_id
+   *   The plugin ID.
+   * @param mixed $plugin_definition
+   *   The plugin definition.
+   * @param \Drupal\filter\Plugin\FilterInterface $decorated
+   *   The decorated plugin instance.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, FilterInterface $decorated, EntityTypeManagerInterface $entity_type_manager) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->decorated = $decorated;
+    $this->entityTypeManager = $entity_type_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      MediaEmbed::create($container, $configuration, $plugin_id, $plugin_definition),
+      $container->get('entity_type.manager')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsForm(array $form, FormStateInterface $form_state) {
+    $form = $this->decorated->settingsForm($form, $form_state);
+    // Get media bundles from options list generated by core for for
+    // allowed media types.
+    $media_bundles = $form['allowed_media_types']['#options'];
+
+    foreach ($media_bundles as $id => $bundle) {
+      // Re states behavior, a detail element should be shown if 1) its
+      // related bundle is allowed in allowed_media_types or 2) if no
+      // bundles are designated in allowed_media_types (as all bundles are
+      // then allowed).
+      $form['bundle_view_modes'][$id] = [
+        '#type' => 'details',
+        '#title' => $this->t('Allowed view modes: @bundle', ['@bundle' => $bundle]),
+        '#open' => FALSE,
+        '#states' => [
+          'visible' => [
+            [
+              ':input[name="filters[media_embed][settings][allowed_media_types][' . $id . ']"]' => ['checked' => TRUE],
+            ],
+            'xor',
+            [
+              '#edit-filters-media-embed-settings-allowed-media-types input' => ['checked' => FALSE],
+            ],
+          ],
+        ],
+      ];
+
+      // Copy view mode and allowed view modes fields provided
+      // by core and modify.
+      $form['bundle_view_modes'][$id]['default_view_mode'] = $form['default_view_mode'];
+      $form['bundle_view_modes'][$id]['default_view_mode']['#default_value'] = isset($this->settings['bundle_view_modes'][$id]['default_view_mode']) ? $this->settings['bundle_view_modes'][$id]['default_view_mode'] : '';
+      $form['bundle_view_modes'][$id]['allowed_view_modes'] = $form['allowed_view_modes'];
+      $form['bundle_view_modes'][$id]['allowed_view_modes']['#default_value'] = isset($this->settings['bundle_view_modes'][$id]['allowed_view_modes']) ? $this->settings['bundle_view_modes'][$id]['allowed_view_modes'] : [];
+    }
+
+    // Override core-provided 'default_view_mode' and 'allowed_view_modes'
+    // fields and replace with hidden fields. This will maintain their
+    // respective config through form submission and config save, even though
+    // they are not seen by the user.
+    $form['default_view_mode'] = [
+      '#type' => 'hidden',
+      '#value' => $this->settings['default_view_mode'],
+    ];
+    $form['allowed_view_modes'] = [
+      '#type' => 'hidden',
+      '#value' => $this->settings['allowed_view_modes'],
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function process($text, $langcode) {
+    return $this->decorated->process($text, $langcode);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function tips($long = FALSE) {
+    return $this->decorated->tips($long);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function calculateDependencies() {
+    // Don't add the media_embed_view_mode_restrictions module as a dependency
+    // because the un-installation of this module will then cause the removal
+    // of text formats that use Media Embed, along with their related editor
+    // instances. The media_embed_view_mode_restrictions_uninstall() function
+    // handles configuration issues on un-installation.
+    $dependencies = [];
+
+    // Create array of all unique view modes.
+    $view_modes = [];
+    foreach ($this->settings['bundle_view_modes'] as $item) {
+      // Combine the view modes from both config parameters.
+      $bundle_view_modes = $item['allowed_view_modes'] + [$item['default_view_mode']];
+      $view_modes = array_merge($view_modes, $bundle_view_modes);
+    }
+    $view_modes = array_unique(array_values($view_modes));
+
+    $dependencies += ['config' => []];
+    $storage = $this->entityTypeManager->getStorage('entity_view_mode');
+    foreach ($view_modes as $view_mode) {
+      if ($entity_view_mode = $storage->load('media.' . $view_mode)) {
+        $dependencies[$entity_view_mode->getConfigDependencyKey()][] = $entity_view_mode->getConfigDependencyName();
+      }
+    }
+
+    return $dependencies;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setConfiguration(array $configuration) {
+    // Remove form submission data for bundles not listed
+    // by 'allowed_media_types'. If no bundles are listed in
+    // 'allowed_media_types', then all bundles are allowed and all
+    // configuration should be saved.
+    if (!empty($configuration['settings']['allowed_media_types'])) {
+      $configuration['settings']['bundle_view_modes'] = array_intersect_key($configuration['settings']['bundle_view_modes'], $configuration['settings']['allowed_media_types']);
+    }
+
+    parent::setConfiguration($configuration);
+  }
+
+}
diff --git a/media_embed_view_mode_restrictions/src/Routing/RouteSubscriber.php b/media_embed_view_mode_restrictions/src/Routing/RouteSubscriber.php
new file mode 100644
index 0000000..a682547
--- /dev/null
+++ b/media_embed_view_mode_restrictions/src/Routing/RouteSubscriber.php
@@ -0,0 +1,25 @@
+<?php
+
+namespace Drupal\media_embed_view_mode_restrictions\Routing;
+
+use Drupal\Core\Routing\RouteSubscriberBase;
+use Symfony\Component\Routing\RouteCollection;
+
+/**
+ * Listens to the dynamic route events.
+ *
+ * This can be removed when https://www.drupal.org/node/3109289 is fixed.
+ */
+class RouteSubscriber extends RouteSubscriberBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function alterRoutes(RouteCollection $collection) {
+    // Override Media Dialog route.
+    if ($route = $collection->get('editor.media_dialog')) {
+      $route->setDefault('_form', '\Drupal\media_embed_view_mode_restrictions\Form\EditorMediaDialogDecorator');
+    }
+  }
+
+}
diff --git a/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php b/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
new file mode 100644
index 0000000..b542142
--- /dev/null
+++ b/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
@@ -0,0 +1,351 @@
+<?php
+
+namespace Drupal\Tests\media_embed_view_mode_restrictions\FunctionalJavascript;
+
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\Component\Utility\Html;
+use Drupal\editor\Entity\Editor;
+use Drupal\file\Entity\File;
+use Drupal\media\Entity\Media;
+use Drupal\Tests\ckeditor\Traits\CKEditorTestTrait;
+use Drupal\Tests\TestFileCreationTrait;
+use Drupal\user\Entity\Role;
+
+/**
+ * Tests CKEditor and Media Library Integration.
+ *
+ * @group media_embed_view_mode_restrictions
+ */
+class CKEditorIntegrationTest extends MediaEmbedViewModeRestrictionsTestBase {
+
+  use CKEditorTestTrait;
+  use TestFileCreationTrait;
+
+  /**
+   * Media object.
+   *
+   * @var \Drupal\media\Entity\Media
+   */
+  protected $media;
+
+  /**
+   * Another media object.
+   *
+   * @var \Drupal\media\Entity\Media
+   */
+  protected $media2;
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $modules = [
+    'ckeditor',
+    'media_library',
+    'media_embed_view_mode_restrictions',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    Editor::create([
+      'editor' => 'ckeditor',
+      'format' => 'media_embed_test',
+      'settings' => [
+        'toolbar' => [
+          'rows' => [
+            [
+              [
+                'name' => 'Main',
+                'items' => [
+                  'Source',
+                  'Undo',
+                  'Redo',
+                ],
+              ],
+            ],
+            [
+              [
+                'name' => 'Embeds',
+                'items' => [
+                  'DrupalMediaLibrary',
+                ],
+              ],
+            ],
+          ],
+        ],
+      ],
+    ])->save();
+
+    EntityViewDisplay::create([
+      'targetEntityType' => 'media',
+      'bundle' => 'image_bundle_1',
+      'mode' => 'viewmode1',
+      'status' => TRUE,
+    ])->removeComponent('thumbnail')
+      ->removeComponent('created')
+      ->removeComponent('uid')
+      ->setComponent('field_media_image', [
+        'label' => 'visually_hidden',
+        'type' => 'image',
+        'settings' => [
+          'image_style' => 'thumbnail',
+          'image_link' => 'file',
+        ],
+        'third_party_settings' => [],
+        'weight' => 1,
+        'region' => 'content',
+      ])
+      ->save();
+    EntityViewDisplay::create([
+      'targetEntityType' => 'media',
+      'bundle' => 'image_bundle_1',
+      'mode' => 'viewmode2',
+      'status' => TRUE,
+    ])->removeComponent('thumbnail')
+      ->removeComponent('created')
+      ->removeComponent('uid')
+      ->setComponent('field_media_image', [
+        'label' => 'visually_hidden',
+        'type' => 'image',
+        'settings' => [
+          'image_style' => 'medium',
+          'image_link' => 'file',
+        ],
+        'third_party_settings' => [],
+        'weight' => 1,
+        'region' => 'content',
+      ])
+      ->save();
+    EntityViewDisplay::create([
+      'targetEntityType' => 'media',
+      'bundle' => 'image_bundle_2',
+      'mode' => 'viewmode3',
+      'status' => TRUE,
+    ])->removeComponent('thumbnail')
+      ->removeComponent('created')
+      ->removeComponent('uid')
+      ->setComponent('field_media_image_1', [
+        'label' => 'visually_hidden',
+        'type' => 'image',
+        'settings' => [
+          'image_style' => 'large',
+          'image_link' => 'file',
+        ],
+        'third_party_settings' => [],
+        'weight' => 1,
+        'region' => 'content',
+      ])
+      ->save();
+
+    $file = File::create([
+      'uri' => $this
+        ->getTestFiles('image')[0]->uri,
+    ]);
+    $file->save();
+
+    $this->media = Media::create([
+      'bundle' => 'image_bundle_1',
+      'name' => 'Bundle 1 Image',
+      'field_media_image' => [
+        [
+          'target_id' => $file->id(),
+          'alt' => 'default alt',
+          'title' => 'default title',
+        ],
+      ],
+    ]);
+    $this->media->save();
+    $this->media2 = Media::create([
+      'bundle' => 'image_bundle_2',
+      'name' => 'Bundle 2 Image',
+      'field_media_image_1' => [
+        [
+          'target_id' => $file->id(),
+          'alt' => 'default alt',
+          'title' => 'default title',
+        ],
+      ],
+    ]);
+    $this->media2->save();
+
+    $this->drupalCreateContentType(['type' => 'blog']);
+  }
+
+  /**
+   * Tests CKEditor and Media Library integration.
+   */
+  public function testIntegration() {
+    $session = $this->getSession();
+    $page = $session->getPage();
+    $assert_session = $this->assertSession();
+    $session->resizeWindow(1200, 2000);
+
+    // Configure test format.
+    $this->drupalGet('admin/config/content/formats/manage/media_embed_test');
+    $page->checkField('filters[media_embed][status]');
+    $page->checkField('filters[media_embed][settings][allowed_media_types][image_bundle_1]');
+    $page->checkField('filters[media_embed][settings][allowed_media_types][image_bundle_2]');
+
+    // Configure Image Bundle 1.
+    $element = $page->find('xpath', '//*[@id="edit-filters-media-embed-settings-bundle-view-modes-image-bundle-1"]/summary');
+    $element->click();
+    $page->fillField('filters[media_embed][settings][bundle_view_modes][image_bundle_1][default_view_mode]', 'viewmode2');
+    $page->checkField('filters[media_embed][settings][bundle_view_modes][image_bundle_1][allowed_view_modes][viewmode1]');
+    $page->checkField('filters[media_embed][settings][bundle_view_modes][image_bundle_1][allowed_view_modes][viewmode2]');
+
+    // Configure Image Bundle 2.
+    $element = $page->find('xpath', '//*[@id="edit-filters-media-embed-settings-bundle-view-modes-image-bundle-2"]/summary');
+    $element->click();
+    $page->fillField('filters[media_embed][settings][bundle_view_modes][image_bundle_2][default_view_mode]', 'viewmode3');
+    $page->checkField('filters[media_embed][settings][bundle_view_modes][image_bundle_2][allowed_view_modes][viewmode3]');
+    $page->pressButton('Save configuration');
+
+    // Update test user role with additional permissions.
+    $role_ids = $this->user->getRoles(TRUE);
+    $role_id = array_shift($role_ids);
+    /** @var  \Drupal\user\Entity\Role */
+    $role = Role::load($role_id);
+    $this->grantPermissions($role, [
+      'use text format test_format',
+      'access media overview',
+      'create blog content',
+      'edit any blog content',
+    ]);
+
+    // Create a new blog node to test insertion of media.
+    $this->drupalGet('/node/add/blog');
+    $this->waitForEditor();
+    $this->pressEditorButton('drupalmedialibrary');
+    $this->assertNotEmpty($assert_session->waitForId('drupal-modal'));
+
+    // Verify Image Bundle 1 tab is active.
+    $assert_session->elementExists('xpath', '//*[contains(@class, "js-media-library-menu")]//a[@data-title="Image Bundle 1"]')->has('css', '.active');
+
+    // Select media item and insert.
+    $assert_session->elementExists('css', '.js-media-library-item')->click();
+    $assert_session->elementExists('css', '.ui-dialog-buttonpane')->pressButton('Insert selected');
+
+    $this->assignNameToCkeditorIframe();
+    $this->getSession()->switchToIFrame('ckeditor');
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', '.cke_widget_drupalmedia drupal-media', 2000));
+    $this->pressEditorButton('source');
+
+    // Verify default view mode is applied.
+    $value = $assert_session->elementExists('css', 'textarea.cke_source')->getValue();
+    $dom = Html::load($value);
+    $xpath = new \DOMXPath($dom);
+    $drupal_media = $xpath->query('//drupal-media')[0];
+    $expected_attributes = [
+      'data-entity-type' => 'media',
+      'data-entity-uuid' => $this->media->uuid(),
+      'data-view-mode' => 'viewmode2',
+    ];
+    foreach ($expected_attributes as $name => $expected) {
+      $this->assertSame($expected, $drupal_media->getAttribute($name));
+    }
+
+    $page->fillField('Title', 'Test Page');
+    $page->pressButton('Save');
+
+    // Check the correct image style is rendered on front end.
+    // The 'medium' image style is used exclusively by the 'viewmode2'
+    // view mode.
+    $element = $page->find('css', 'img');
+    $src = $element->getAttribute('src');
+    $this->assertTrue(strpos($src, 'styles/medium/public') !== FALSE);
+
+    // Go back and edit the embedded media.
+    $this->drupalGet('/node/1/edit');
+    $this->waitForEditor();
+    $this->assignNameToCkeditorIframe();
+    $this->getSession()->switchToIFrame('ckeditor');
+
+    $page->pressButton('Edit media');
+    $this->waitForMediaDialog();
+
+    // Verify view mode options are properly restricted on edit form.
+    $assert_session->elementExists('xpath', '//*[@name="attributes[data-view-mode]"]');
+    $assert_session->optionExists('attributes[data-view-mode]', 'viewmode1');
+    $assert_session->optionExists('attributes[data-view-mode]', 'viewmode2');
+    $assert_session->optionNotExists('attributes[data-view-mode]', 'viewmode3');
+
+    // Create another blog node.
+    $this->drupalGet('/node/add/blog');
+    $this->waitForEditor();
+    $this->pressEditorButton('drupalmedialibrary');
+    $this->assertNotEmpty($assert_session->waitForId('drupal-modal'));
+
+    // Select Image Bundle 2 tab.
+    $assert_session->elementExists('xpath', '//*[contains(@class, "js-media-library-menu")]//a[@data-title="Image Bundle 2"]')->click();
+    $assert_session->waitForElementVisible('xpath', '//form[@data-drupal-media-type="image_bundle_2"]');
+
+    // Select media item and insert.
+    $element = $page->find('css', '.js-media-library-item');
+    $element->click();
+    $assert_session->elementExists('css', '.ui-dialog-buttonpane')->pressButton('Insert selected');
+
+    $this->assignNameToCkeditorIframe();
+    $this->getSession()->switchToIFrame('ckeditor');
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', '.cke_widget_drupalmedia drupal-media', 2000));
+    $this->pressEditorButton('source');
+
+    // Verify default view mode is applied.
+    $value = $assert_session->elementExists('css', 'textarea.cke_source')->getValue();
+    $dom = Html::load($value);
+    $xpath = new \DOMXPath($dom);
+    $drupal_media = $xpath->query('//drupal-media')[0];
+    $expected_attributes = [
+      'data-entity-type' => 'media',
+      'data-entity-uuid' => $this->media2->uuid(),
+      'data-view-mode' => 'viewmode3',
+    ];
+    foreach ($expected_attributes as $name => $expected) {
+      $this->assertSame($expected, $drupal_media->getAttribute($name));
+    }
+
+    $page->fillField('Title', 'Test Page 2');
+    $page->pressButton('Save');
+
+    // Check the correct image style is rendered on front end.
+    // The 'large' image style is used exclusively by the 'viewmode3'
+    // view mode.
+    $element = $page->find('css', 'img');
+    $src = $element->getAttribute('src');
+    $this->assertTrue(strpos($src, 'styles/large/public') !== FALSE);
+
+    // Go back and edit the embedded media.
+    $this->drupalGet('/node/2/edit');
+    $this->waitForEditor();
+    $this->assignNameToCkeditorIframe();
+    $this->getSession()->switchToIFrame('ckeditor');
+
+    $page->pressButton('Edit media');
+    $this->waitForMediaDialog();
+
+    // Verify view mode options are properly restricted on edit form.
+    // Whereas only one option is available, none should be presented.
+    $assert_session->elementNotExists('xpath', '//*[@name="attributes[data-view-mode]"]');
+  }
+
+  /**
+   * Waits for the form that allows editing metadata.
+   *
+   * "Borrowed" from
+   * Drupal\Tests\media\FunctionalJavascript\CKEditorIntegrationTest.
+   * Renamed from waitForMetadataDialog().
+   */
+  protected function waitForMediaDialog() {
+    $page = $this->getSession()->getPage();
+    $this->getSession()->switchToIFrame();
+    // Wait for the dialog to open.
+    $result = $page->waitFor(10, function ($page) {
+      $metadata_editor = $page->find('css', 'form.editor-media-dialog');
+      return !empty($metadata_editor);
+    });
+    $this->assertTrue($result);
+  }
+
+}
diff --git a/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/FilterFormatConfigurationTest.php b/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/FilterFormatConfigurationTest.php
new file mode 100644
index 0000000..1a4da9f
--- /dev/null
+++ b/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/FilterFormatConfigurationTest.php
@@ -0,0 +1,251 @@
+<?php
+
+namespace Drupal\Tests\media_embed_view_mode_restrictions\FunctionalJavascript;
+
+use Drupal\filter\Entity\FilterFormat;
+
+/**
+ * Tests configuration storage, installation, & uninstallation.
+ *
+ * @group media_embed_view_mode_restrictions
+ */
+class FilterFormatConfigurationTest extends MediaEmbedViewModeRestrictionsTestBase {
+
+  /**
+   * Test configuration form and storage.
+   *
+   * Also tests install and uninstall.
+   */
+  public function testConfiguration() {
+    $session = $this->getSession();
+    $page = $session->getPage();
+    $assert_session = $this->assertSession();
+    $session->resizeWindow(1200, 2000);
+
+    // Set filter format configuration before enabling Media Embed View Mode
+    // Restrictions module.
+    $this->drupalGet('admin/config/content/formats/manage/media_embed_test');
+
+    $page->checkField('filters[media_embed][status]');
+    $page->fillField('filters[media_embed][settings][default_view_mode]', 'viewmode1');
+    $page->checkField('filters[media_embed][settings][allowed_view_modes][viewmode1]');
+    $page->checkField('filters[media_embed][settings][allowed_view_modes][viewmode2]');
+    $page->checkField('filters[media_embed][settings][allowed_view_modes][viewmode3]');
+    $page->pressButton('Save configuration');
+
+    // Install Media Embed View Mode Restrictions module.
+    \Drupal::service('module_installer')->install(['media_embed_view_mode_restrictions']);
+
+    // Verify configuration is unchanged upon installation.
+    $filter_format = FilterFormat::load('media_embed_test');
+    /** @var \Drupal\filter\Plugin\FilterInterface */
+    $media_embed_filter = $filter_format->filters('media_embed');
+
+    $this->assertSame($media_embed_filter->settings['default_view_mode'], 'viewmode1');
+    $this->assertEmpty($media_embed_filter->settings['allowed_media_types']);
+    $allowed_view_modes = [
+      'viewmode1' => 'viewmode1',
+      'viewmode2' => 'viewmode2',
+      'viewmode3' => 'viewmode3',
+    ];
+    $this->assertSame($media_embed_filter->settings['allowed_view_modes'], $allowed_view_modes);
+
+    // Set per-bundle configuration and verify #states behavior.
+    $this->drupalGet('admin/config/content/formats/manage/media_embed_test');
+
+    $assert_session->checkboxNotChecked('filters[media_embed][settings][allowed_media_types][file]');
+    $assert_session->checkboxNotChecked('filters[media_embed][settings][allowed_media_types][image_bundle_1]');
+    $assert_session->checkboxNotChecked('filters[media_embed][settings][allowed_media_types][image_bundle_2]');
+
+    $assert_session->assertVisibleInViewport('xpath', "//*[@id='edit-filters-media-embed-settings-bundle-view-modes-file']/summary");
+    $assert_session->assertVisibleInViewport('xpath', "//*[@id='edit-filters-media-embed-settings-bundle-view-modes-image-bundle-1']/summary");
+    $assert_session->assertVisibleInViewport('xpath', "//*[@id='edit-filters-media-embed-settings-bundle-view-modes-image-bundle-2']/summary");
+
+    // Only permit Image Bundle 1 and Image Bundle 2.
+    $page->checkField('filters[media_embed][settings][allowed_media_types][image_bundle_1]');
+    $page->checkField('filters[media_embed][settings][allowed_media_types][image_bundle_2]');
+
+    // Verify #states behavior.
+    $element = $page->findById('edit-filters-media-embed-settings-bundle-view-modes-file');
+    $this->assertFalse($element->isVisible());
+    $element = $page->findById('edit-filters-media-embed-settings-bundle-view-modes-image-bundle-1');
+    $this->assertTrue($element->isVisible());
+    $element = $page->findById('edit-filters-media-embed-settings-bundle-view-modes-image-bundle-2');
+    $this->assertTrue($element->isVisible());
+
+    // Configure Image Bundle 1.
+    $element = $page->find('xpath', '//*[@id="edit-filters-media-embed-settings-bundle-view-modes-image-bundle-1"]/summary');
+    $element->click();
+    $page->fillField('filters[media_embed][settings][bundle_view_modes][image_bundle_1][default_view_mode]', 'viewmode2');
+    $page->checkField('filters[media_embed][settings][bundle_view_modes][image_bundle_1][allowed_view_modes][viewmode1]');
+    $page->checkField('filters[media_embed][settings][bundle_view_modes][image_bundle_1][allowed_view_modes][viewmode2]');
+
+    // Configure Image Bundle 2.
+    $element = $page->find('xpath', '//*[@id="edit-filters-media-embed-settings-bundle-view-modes-image-bundle-2"]/summary');
+    $element->click();
+    $page->fillField('filters[media_embed][settings][bundle_view_modes][image_bundle_2][default_view_mode]', 'viewmode3');
+    $page->checkField('filters[media_embed][settings][bundle_view_modes][image_bundle_2][allowed_view_modes][viewmode3]');
+
+    // Verify File configuration is not visible.
+    $element = $page->findById('edit-filters-media-embed-settings-bundle-view-modes-file');
+    $this->assertFalse($element->isVisible());
+
+    $page->pressButton('Save configuration');
+
+    // Verify configuration storage.
+    $filter_format = FilterFormat::load('media_embed_test');
+    /** @var \Drupal\filter\Plugin\FilterInterface */
+    $media_embed_filter = $filter_format->filters('media_embed');
+
+    // Verify disused 'default_view_mode' config is unchanged.
+    $this->assertSame($media_embed_filter->settings['default_view_mode'], 'viewmode1');
+    // Verify used 'allowed_media_types ' config is changed.
+    $allowed_media_types = [
+      'image_bundle_1' => 'image_bundle_1',
+      'image_bundle_2' => 'image_bundle_2',
+    ];
+    $this->assertSame($media_embed_filter->settings['allowed_media_types'], $allowed_media_types);
+    // Verify disused 'allowed_view_modes' config is unchanged.
+    $allowed_view_modes = [
+      'viewmode1' => 'viewmode1',
+      'viewmode2' => 'viewmode2',
+      'viewmode3' => 'viewmode3',
+    ];
+    $this->assertSame($media_embed_filter->settings['allowed_view_modes'], $allowed_view_modes);
+
+    // Verify no configuration is stored for File media bundle.
+    $this->assertFalse(isset($media_embed_filter->settings['bundle_view_modes']['file']));
+
+    // Verify configuration storage for Image Bundle 1 media bundle.
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_1']['default_view_mode'], 'viewmode2');
+    $allowed_view_modes = [
+      'viewmode1' => 'viewmode1',
+      'viewmode2' => 'viewmode2',
+    ];
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_1']['allowed_view_modes'], $allowed_view_modes);
+
+    // Verify configuration storage for Image Bundle 2 media bundle.
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_2']['default_view_mode'], 'viewmode3');
+    $allowed_view_modes = [
+      'viewmode3' => 'viewmode3',
+    ];
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_2']['allowed_view_modes'], $allowed_view_modes);
+
+    // Add File media bundle configuration.
+    $this->drupalGet('admin/config/content/formats/manage/media_embed_test');
+
+    $page->checkField('filters[media_embed][settings][allowed_media_types][file]');
+
+    $element = $page->find('xpath', '//*[@id="edit-filters-media-embed-settings-bundle-view-modes-file"]/summary');
+    $element->click();
+    $page->fillField('filters[media_embed][settings][bundle_view_modes][file][default_view_mode]', 'default');
+    $page->checkField('filters[media_embed][settings][bundle_view_modes][file][allowed_view_modes][default]');
+
+    $page->pressButton('Save configuration');
+
+    // Verify file bundle configuration has been added.
+    $filter_format = FilterFormat::load('media_embed_test');
+    /** @var \Drupal\filter\Plugin\FilterInterface */
+    $media_embed_filter = $filter_format->filters('media_embed');
+
+    // Verify configuration storage for File media bundle.
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['file']['default_view_mode'], 'default');
+    $allowed_view_modes = [
+      'default' => 'default',
+    ];
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['file']['allowed_view_modes'], $allowed_view_modes);
+
+    // Uncheck all allowed bundle checkboxes.
+    $this->drupalGet('admin/config/content/formats/manage/media_embed_test');
+
+    $page->uncheckField('filters[media_embed][settings][allowed_media_types][file]');
+    $page->uncheckField('filters[media_embed][settings][allowed_media_types][image_bundle_1]');
+    $page->uncheckField('filters[media_embed][settings][allowed_media_types][image_bundle_2]');
+
+    $page->pressButton('Save configuration');
+
+    // Verify configuration storage.
+    // If no allowed bundles are specified, then all are allowed.
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['file']['default_view_mode'], 'default');
+    $allowed_view_modes = [
+      'default' => 'default',
+    ];
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['file']['allowed_view_modes'], $allowed_view_modes);
+
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_1']['default_view_mode'], 'viewmode2');
+    $allowed_view_modes = [
+      'viewmode1' => 'viewmode1',
+      'viewmode2' => 'viewmode2',
+    ];
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_1']['allowed_view_modes'], $allowed_view_modes);
+
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_2']['default_view_mode'], 'viewmode3');
+    $allowed_view_modes = [
+      'viewmode3' => 'viewmode3',
+    ];
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_2']['allowed_view_modes'], $allowed_view_modes);
+
+    // Disallow File media bundle.
+    // This should result in its configuration being removed.
+    $this->drupalGet('admin/config/content/formats/manage/media_embed_test');
+
+    $page->checkField('filters[media_embed][settings][allowed_media_types][image_bundle_1]');
+    $page->checkField('filters[media_embed][settings][allowed_media_types][image_bundle_2]');
+    $assert_session->checkboxNotChecked('filters[media_embed][settings][allowed_media_types][file]');
+
+    $page->pressButton('Save configuration');
+
+    // Verify configuration storage.
+    $filter_format = FilterFormat::load('media_embed_test');
+    /** @var \Drupal\filter\Plugin\FilterInterface */
+    $media_embed_filter = $filter_format->filters('media_embed');
+
+    // Verify File media bundle configuration has been removed.
+    $this->assertFalse(isset($media_embed_filter->settings['bundle_view_modes']['file']));
+
+    // Verify Image Bundle 1 stored configuration is unchanged.
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_1']['default_view_mode'], 'viewmode2');
+    $allowed_view_modes = [
+      'viewmode1' => 'viewmode1',
+      'viewmode2' => 'viewmode2',
+    ];
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_1']['allowed_view_modes'], $allowed_view_modes);
+
+    // Verify Image Bundle 2 stored configuration is unchanged.
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_2']['default_view_mode'], 'viewmode3');
+    $allowed_view_modes = [
+      'viewmode3' => 'viewmode3',
+    ];
+    $this->assertSame($media_embed_filter->settings['bundle_view_modes']['image_bundle_2']['allowed_view_modes'], $allowed_view_modes);
+
+    // Uninstall Media Embed View Mode Restrictions module.
+    \Drupal::service('module_installer')->uninstall(['media_embed_view_mode_restrictions'], FALSE);
+
+    // Verify configuration storage.
+    $filter_format = FilterFormat::load('media_embed_test');
+    /** @var \Drupal\filter\Plugin\FilterInterface */
+    $media_embed_filter = $filter_format->filters('media_embed');
+
+    // Verify original 'default_view_mode' remains unchanged.
+    $this->assertSame($media_embed_filter->settings['default_view_mode'], 'viewmode1');
+    // Verify changed 'allowed_media_types' is unaffected by uninstallation.
+    $allowed_media_types = [
+      'image_bundle_1' => 'image_bundle_1',
+      'image_bundle_2' => 'image_bundle_2',
+    ];
+    $this->assertSame($media_embed_filter->settings['allowed_media_types'], $allowed_media_types);
+    // Verify original 'allowed_view_modes' remains unchanged.
+    $allowed_view_modes = [
+      'viewmode1' => 'viewmode1',
+      'viewmode2' => 'viewmode2',
+      'viewmode3' => 'viewmode3',
+    ];
+    $this->assertSame($media_embed_filter->settings['allowed_view_modes'], $allowed_view_modes);
+
+    // Verify per-bundle configuration was removed during uninstallation.
+    $this->assertFalse(isset($media_embed_filter->settings['bundle_view_modes']['file']));
+    $this->assertFalse(isset($media_embed_filter->settings['bundle_view_modes']['image_bundle_1']));
+    $this->assertFalse(isset($media_embed_filter->settings['bundle_view_modes']['image_bundle_2']));
+  }
+
+}
diff --git a/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/MediaEmbedViewModeRestrictionsTestBase.php b/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/MediaEmbedViewModeRestrictionsTestBase.php
new file mode 100644
index 0000000..3a23cec
--- /dev/null
+++ b/media_embed_view_mode_restrictions/tests/src/FunctionalJavascript/MediaEmbedViewModeRestrictionsTestBase.php
@@ -0,0 +1,96 @@
+<?php
+
+namespace Drupal\Tests\media_embed_view_mode_restrictions\FunctionalJavascript;
+
+use Drupal\Core\Entity\Entity\EntityViewMode;
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
+
+/**
+ * Base test class.
+ */
+abstract class MediaEmbedViewModeRestrictionsTestBase extends WebDriverTestBase {
+
+  use MediaTypeCreationTrait;
+
+  /**
+   * User object.
+   *
+   * @var \Drupal\user\Entity\User
+   */
+  protected $user;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $modules = [
+    'system',
+    'filter',
+    'node',
+    'field_ui',
+    'media',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    $this->createMediaType('image', [
+      'id' => 'image_bundle_1',
+      'label' => 'Image Bundle 1',
+    ]);
+    $this->createMediaType('image', [
+      'id' => 'image_bundle_2',
+      'label' => 'Image Bundle 2',
+    ]);
+    $this->createMediaType('file', [
+      'id' => 'file',
+      'label' => 'File',
+    ]);
+
+    EntityViewMode::create([
+      'id' => 'media.viewmode1',
+      'targetEntityType' => 'media',
+      'status' => TRUE,
+      'enabled' => TRUE,
+      'label' => 'View mode 1',
+    ])->save();
+    EntityViewMode::create([
+      'id' => 'media.viewmode2',
+      'targetEntityType' => 'media',
+      'status' => TRUE,
+      'enabled' => TRUE,
+      'label' => 'View mode 2',
+    ])->save();
+    EntityViewMode::create([
+      'id' => 'media.viewmode3',
+      'targetEntityType' => 'media',
+      'status' => TRUE,
+      'enabled' => TRUE,
+      'label' => 'View mode 3',
+    ])->save();
+
+    $format = FilterFormat::create([
+      'format' => 'media_embed_test',
+      'name' => 'Test format',
+      'filters' => [],
+    ]);
+    $format->save();
+
+    $this->user = $this->drupalCreateUser([
+      'administer filters',
+      $format->getPermissionName(),
+    ]);
+
+    $this->drupalLogin($this->user);
+  }
+
+}
