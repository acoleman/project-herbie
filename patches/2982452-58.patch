diff --git a/modules/layout_builder_restrictions_by_region/config/schema/layout_builder_restrictions_by_region.schema.yml b/modules/layout_builder_restrictions_by_region/config/schema/layout_builder_restrictions_by_region.schema.yml
new file mode 100644
index 0000000..451f00a
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/config/schema/layout_builder_restrictions_by_region.schema.yml
@@ -0,0 +1,40 @@
+layout_builder_restrictions.entity_view_mode_restriction_by_region:
+  type: mapping
+  label: 'Per-layout-region Layout Builder Restrictions settings'
+  mapping:
+    allowed_layouts:
+      type: sequence
+      label: 'Allowed layouts'
+      sequence:
+        type: string
+        label: 'Layout ID'
+    whitelisted_blocks:
+      type: sequence
+      label: 'Layouts to be restricted'
+      sequence:
+        type: sequence
+        label: 'Layout restrictions'
+        sequence:
+          type: sequence
+          label: 'Regions to be restricted'
+          sequence:
+            type: sequence
+            label: 'Region restrictions'
+            sequence:
+              type: string
+              label: Category
+    blacklisted_blocks:
+      type: sequence
+      label: 'Layouts to be restricted'
+      sequence:
+        type: sequence
+        label: 'Layout restrictions'
+        sequence:
+          type: sequence
+          label: 'Regions to be restricted'
+          sequence:
+            type: sequence
+            label: 'Region restrictions'
+            sequence:
+              type: string
+              label: Category
diff --git a/modules/layout_builder_restrictions_by_region/js/display_mode_form.js b/modules/layout_builder_restrictions_by_region/js/display_mode_form.js
new file mode 100644
index 0000000..73674a0
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/js/display_mode_form.js
@@ -0,0 +1,28 @@
+(function ($, Drupal) {
+  Drupal.behaviors.layoutBuilderRestrictionsByRegion = {
+    attach: function (context, settings) {
+      // On page load.
+      $( 'input.restriction-type:checked').each(function() {
+        displayToggle(this);
+      });
+
+      // On change of restrictions radios.
+      $( 'input.restriction-type', context ).change(function(e) {
+        displayToggle(this);
+      });
+
+      function displayToggle(element) {
+        var layoutPlugin = $(element).attr('data-layout-plugin');
+
+        if ($(element).val() == 'all') {
+          $( 'details[data-layout-plugin="' + layoutPlugin + '"] tbody tr[data-region="all_regions"]', context ).removeClass('hidden');
+          $( 'details[data-layout-plugin="' + layoutPlugin + '"] tbody tr:not([data-region="all_regions"])', context ).addClass('hidden');
+        }
+        else if ($(element).val() == 'per-region') {
+          $( 'details[data-layout-plugin="' + layoutPlugin + '"] tbody tr[data-region="all_regions"]', context ).addClass('hidden');
+          $( 'details[data-layout-plugin="' + layoutPlugin + '"] tbody tr:not([data-region="all_regions"])', context ).removeClass('hidden');
+        }
+      }
+    }
+  };
+})(jQuery, Drupal);
diff --git a/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.info.yml b/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.info.yml
new file mode 100644
index 0000000..f7def81
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.info.yml
@@ -0,0 +1,9 @@
+name: Layout Builder Restrictions By Region
+core: 8.x
+description: 'Restricts layouts and blocks per layout region'
+type: module
+dependencies:
+  - drupal:layout_builder
+  - drupal:layout_builder_restrictions
+test_dependencies:
+  - layout_library:layout_library
diff --git a/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.libraries.yml b/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.libraries.yml
new file mode 100644
index 0000000..1e8169e
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.libraries.yml
@@ -0,0 +1,6 @@
+display_mode_form:
+  js:
+    js/display_mode_form.js: {}
+  dependencies:
+    - core/jquery
+    - core/drupal.dialog
diff --git a/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.module b/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.module
new file mode 100644
index 0000000..cdc6e43
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.module
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * @file
+ * Module file for Layout Builder Restrictions by Region.
+ */
+
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\layout_builder_restrictions_by_region\Form\FormAlter;
+
+/**
+ * Implements hook_form_FORM_ID_alter() for the entity view display edit form.
+ */
+function layout_builder_restrictions_by_region_form_entity_view_display_edit_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
+  $entity_view_mode_restriction_active = TRUE;
+  if ($config = \Drupal::config('layout_builder_restrictions.plugins')->get('plugin_config')) {
+    // Provide the per view mode restriction UI *unless* the plugin is disabled.
+    if (isset($config['entity_view_mode_restriction_by_region']) && $config['entity_view_mode_restriction_by_region']['enabled'] == FALSE) {
+      $entity_view_mode_restriction_active = FALSE;
+    }
+  }
+  if ($entity_view_mode_restriction_active) {
+    \Drupal::classResolver(FormAlter::class)->alterEntityViewDisplayForm($form, $form_state, $form_id);
+  }
+}
diff --git a/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.services.yml b/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.services.yml
new file mode 100644
index 0000000..5a5ddbe
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/layout_builder_restrictions_by_region.services.yml
@@ -0,0 +1,6 @@
+services:
+  layout_builder_restrictions_by_region.route_subscriber:
+    class: Drupal\layout_builder_restrictions_by_region\Routing\RouteSubscriber
+    arguments: ['@entity_type.manager']
+    tags:
+      - { name: event_subscriber }
diff --git a/modules/layout_builder_restrictions_by_region/src/Form/AllowedBlocksForm.php b/modules/layout_builder_restrictions_by_region/src/Form/AllowedBlocksForm.php
new file mode 100644
index 0000000..f558c72
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/src/Form/AllowedBlocksForm.php
@@ -0,0 +1,450 @@
+<?php
+
+namespace Drupal\layout_builder_restrictions_by_region\Form;
+
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Ajax\CloseModalDialogCommand;
+use Drupal\Core\Ajax\ReplaceCommand;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Form\FormBuilderInterface;
+use Drupal\Core\Layout\LayoutPluginManagerInterface;
+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\Core\Render\Renderer;
+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\Core\Url;
+use Drupal\layout_builder_restrictions\Traits\PluginHelperTrait;
+use Drupal\layout_builder_restrictions_by_region\Traits\LayoutBuilderRestrictionsByRegionHelperTrait;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Provides form for designating allowed blocks.
+ */
+class AllowedBlocksForm extends FormBase {
+
+  use PluginHelperTrait;
+  use LayoutBuilderRestrictionsByRegionHelperTrait;
+
+  /**
+   * Request stack that controls the lifecycle of requests.
+   *
+   * @var \Symfony\Component\HttpFoundation\RequestStack
+   */
+  protected $requestStack;
+
+  /**
+   * The layout manager.
+   *
+   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   */
+  protected $layoutManager;
+
+  /**
+   * Manages entity type plugin definitions.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManager
+   */
+  protected $entityTypeManager;
+
+  /**
+   * Creates a private temporary storage for a collection.
+   *
+   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   */
+  protected $privateTempStoreFactory;
+
+  /**
+   * The Messenger service.
+   *
+   * @var \Drupal\Core\Messenger\MessengerInterface
+   */
+  protected $messenger;
+
+  /**
+   * Turns a render array into a HTML string.
+   *
+   * @var \Drupal\Core\Render\Renderer
+   */
+  protected $renderer;
+
+  /**
+   * An array of allowed block categories, or empty.
+   *
+   * @var array
+   */
+  protected $allowedBlockCategories;
+
+  /**
+   * Layout/Region-specific selections, prior to full form submit.
+   *
+   * @var array
+   */
+  protected $tempData;
+
+  /**
+   * An array of whitelisted blocks, by category.
+   *
+   * @var array
+   */
+  protected $whitelistedBlocks;
+
+  /**
+   * An array of blacklisted blocks, by category.
+   *
+   * @var array
+   */
+  protected $blacklistedBlocks;
+
+  /**
+   * The machine name of the layout plugin.
+   *
+   * @var string
+   */
+  protected $layoutPluginId;
+
+  /**
+   * The machine name of the region.
+   *
+   * @var string
+   */
+  protected $regionId;
+
+  /**
+   * The machine name of the static id.
+   *
+   * @var string
+   */
+  protected $staticId;
+
+  /**
+   * The ModalFormExampleController constructor.
+   *
+   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   *   Request stack that controls the lifecycle of requests.
+   * @param \Drupal\Core\Block\LayoutPluginManagerInterface $layout_manager
+   *   The layout plugin manager.
+   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   *   Manages entity type plugin definitions.
+   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_temp_store_factory
+   *   Creates a private temporary storage for a collection.
+   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   *   The messenger service.
+   * @param \Drupal\Core\Render\Renderer $renderer
+   *   Turns a render array into a HTML string.
+   */
+  public function __construct(RequestStack $request_stack, LayoutPluginManagerInterface $layout_manager, EntityTypeManager $entity_type_manager, PrivateTempStoreFactory $private_temp_store_factory, MessengerInterface $messenger, Renderer $renderer) {
+    $this->requestStack = $request_stack;
+    $this->layoutManager = $layout_manager;
+    $this->entityTypeManager = $entity_type_manager;
+    $this->privateTempStoreFactory = $private_temp_store_factory;
+    $this->messenger = $messenger;
+    $this->renderer = $renderer;
+
+    // Build data for current form.
+    $current_request = $this->requestStack->getCurrentRequest();
+    $entity_view_display_id = $current_request->query->get('entity_view_display_id');
+    $display = $this->entityTypeManager
+      ->getStorage('entity_view_display')
+      ->load($entity_view_display_id);
+    $this->layoutPluginId = $current_request->query->get('layout_plugin');
+    $this->regionId = $current_request->query->get('region_id');
+    $this->allowedBlockCategories = $display->getThirdPartySetting('layout_builder_restrictions', 'allowed_block_categories', []);
+    $third_party_settings = $display->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
+    $this->whitelistedBlocks = (isset($third_party_settings['whitelisted_blocks'][$this->layoutPluginId][$this->regionId])) ? $third_party_settings['whitelisted_blocks'][$this->layoutPluginId][$this->regionId] : [];
+    $this->blacklistedBlocks = (isset($third_party_settings['blacklisted_blocks'][$this->layoutPluginId][$this->regionId])) ? $third_party_settings['blacklisted_blocks'][$this->layoutPluginId][$this->regionId] : [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('request_stack'),
+      $container->get('plugin.manager.core.layout'),
+      $container->get('entity_type.manager'),
+      $container->get('tempstore.private'),
+      $container->get('messenger'),
+      $container->get('renderer')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'layout_builder_by_region_allowed_blocks';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $current_request = $this->requestStack->getCurrentRequest();
+    $static_id = $current_request->query->get('static_id');
+    $entity_view_display_id = $current_request->query->get('entity_view_display_id');
+    $layout_plugin = $current_request->query->get('layout_plugin');
+    $region_id = $current_request->query->get('region_id');
+    $display = $this->entityTypeManager
+      ->getStorage('entity_view_display')
+      ->load($entity_view_display_id);
+    // Load tempstore data.
+    $tempstore = $this->privateTempStoreFactory;
+    $store = $tempstore->get('layout_builder_restrictions_by_region');
+    $temp_data = $store->get($static_id . ':' . $layout_plugin . ':' . $region_id);
+
+    $layout_definition = $this->layoutManager->getDefinition($layout_plugin);
+    $regions = $layout_definition->getRegions();
+    $regions['all_regions'] = [
+      'label' => $this->t('All regions'),
+    ];
+    $region_label = $regions[$region_id]['label']->render();
+    $layout_label = $layout_definition->getLabel();
+
+    $form['config_context_markup'] = [
+      '#markup' => $this->t('<strong>Layout:</strong> @layout_label<br><strong>Region:</strong> @region_label', ['@layout_label' => $layout_label, '@region_label' => $region_label]),
+    ];
+
+    foreach ($this->getBlockDefinitions($display) as $category => $data) {
+      $title = $data['label'];
+      if (!empty($data['translated_label'])) {
+        $title = $data['translated_label'];
+      }
+      $category_form = [
+        '#type' => 'fieldset',
+        '#title' => $title,
+      ];
+      $category_form['restriction_behavior'] = [
+        '#type' => 'radios',
+        '#options' => [
+          "all" => $this->t('Allow all existing & new %category blocks.', ['%category' => $data['label']]),
+          "whitelisted" => $this->t('Allow specific %category blocks (whitelist):', ['%category' => $data['label']]),
+          "blacklisted" => $this->t('Restrict specific %category blocks (blacklist):', ['%category' => $data['label']]),
+        ],
+        '#parents' => [
+          'allowed_blocks',
+          $category,
+          'restriction',
+        ],
+      ];
+      $category_form['restriction_behavior']['#default_value'] = $this->getCategoryBehavior($category, $temp_data);
+      foreach ($data['definitions'] as $block_id => $block) {
+        $category_form['allowed_blocks'][$block_id] = [
+          '#type' => 'checkbox',
+          '#title' => $block['admin_label'],
+          '#default_value' => $this->getBlockDefault($block_id, $category, $temp_data),
+          '#parents' => [
+            'allowed_blocks',
+            $category,
+            'allowed_blocks',
+            $block_id,
+          ],
+          '#states' => [
+            'invisible' => [
+              ':input[name="allowed_blocks[' . $category . '][restriction]"]' => ['value' => "all"],
+            ],
+          ],
+        ];
+      }
+
+      if ($category == 'Custom blocks' || $category == 'Custom block types') {
+        $category_form['description'] = [
+          '#type' => 'container',
+          '#children' => $this->t('<p>In the event both <em>Custom Block Types</em> and <em>Custom Blocks</em> restrictions are enabled, <em>Custom Block Types</em> restrictions are disregarded.</p>'),
+          '#states' => [
+            'visible' => [
+              ':input[name="allowed_blocks[' . $category . '][restriction]"]' => ['value' => "restricted"],
+            ],
+          ],
+        ];
+      }
+      $form['allowed_blocks'][$category] = $category_form;
+    }
+
+    $form['static_id'] = [
+      '#type' => 'hidden',
+      '#value' => $static_id,
+    ];
+
+    $form['layout_plugin'] = [
+      '#type' => 'hidden',
+      '#value' => $layout_plugin,
+    ];
+
+    $form['region_id'] = [
+      '#type' => 'hidden',
+      '#value' => $region_id,
+    ];
+
+    $form['actions']['submit'] = [
+      '#type' => 'submit',
+      '#value' => $this->t('Save'),
+      '#ajax' => [
+        'callback' => '::ajaxSubmit',
+        'event' => 'click',
+        'url' => Url::fromRoute("layout_builder_restrictions_by_region.{$display->getTargetEntityTypeId()}_allowed_blocks", [
+          'static_id' => $static_id,
+          'entity_view_display_id' => $entity_view_display_id,
+          'layout_plugin' => $layout_plugin,
+          'region_id' => $region_id,
+        ]),
+        'options' => [
+          'query' => [
+            FormBuilderInterface::AJAX_FORM_REQUEST => TRUE,
+          ],
+        ],
+      ],
+    ];
+
+    return $form;
+  }
+
+  /**
+   * Callback function for AJAX form submission.
+   *
+   * @param array $form
+   *   An associative array containing the structure of the form.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The current state of the form.
+   */
+  public function ajaxSubmit(array &$form, FormStateInterface $form_state) {
+    $values = $form_state->getValues();
+
+    $static_id = $values['static_id'];
+    $layout_plugin = $values['layout_plugin'];
+    $region_id = $values['region_id'];
+    $categories = $values['allowed_blocks'];
+
+    $block_restrictions = [];
+    if (!empty($categories)) {
+      foreach ($categories as $category => $category_setting) {
+        $restriction_type = $category_setting['restriction'];
+        $block_restrictions[$category]['restriction_type'] = $restriction_type;
+        if (in_array($restriction_type, ['whitelisted', 'blacklisted'])) {
+          foreach ($category_setting['allowed_blocks'] as $block_id => $block_setting) {
+            if ($block_setting == '1') {
+              // Include only checked blocks.
+              $block_restrictions[$category]['restrictions'][$block_id] = $block_setting;
+            }
+          }
+        }
+      }
+    }
+
+    // Write settings to tempStore.
+    $tempstore = $this->privateTempStoreFactory;
+    $store = $tempstore->get('layout_builder_restrictions_by_region');
+    $store->set($static_id . ':' . $layout_plugin . ':' . $region_id, $block_restrictions);
+
+    $response = new AjaxResponse();
+
+    if ($form_state->getErrors()) {
+      // Could there ever be form errors?
+      // It's all checkboxes and radio buttons.
+    }
+    else {
+      $command = new CloseModalDialogCommand();
+      $response->addCommand($command);
+
+      $this->messenger->addWarning($this->t('There is unsaved Layout Builder Restrictions configuration.'));
+      $status_messages = ['#type' => 'status_messages'];
+      $messages = $this->renderer->renderRoot($status_messages);
+      $messages = '<div id="layout-builder-restrictions-messages">' . $messages . '</div>';
+      if (!empty($messages)) {
+        $response->addCommand(new ReplaceCommand('#layout-builder-restrictions-messages', $messages));
+      }
+
+      $region_status = $this->RegionRestrictionStatusString($layout_plugin, $region_id, $static_id, NULL);
+      $response->addCommand(new ReplaceCommand('#restriction-status--' . $layout_plugin . '--' . $region_id . ' .data', '<span class="data">' . $region_status . '</span>'));
+    }
+
+    return $response;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function validateForm(array &$form, FormStateInterface $form_state) {}
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {}
+
+  /**
+   * Business logic to set category to 'all', 'whitelisted' or 'blacklisted'.
+   *
+   * @param string $category
+   *   The block's category.
+   * @param mixed $temp_data
+   *   The data stored between AJAX submits or null.
+   *
+   * @return string
+   *   The value 'all', 'whitelisted' or 'blacklisted'.
+   */
+  protected function getCategoryBehavior($category, $temp_data) {
+    // Check whether this is a newly available category that has been
+    // restricted previously.
+    $category_is_restricted = (!empty($this->allowedBlockCategories) && !in_array($category, $this->allowedBlockCategories));
+    // Attempt to retrieve default value from tempStore, then from config
+    // before settings to 'all'.
+    if (!is_null($temp_data[$category]['restriction_type'])) {
+      return $temp_data[$category]['restriction_type'];
+    }
+    else {
+      if (isset($this->whitelistedBlocks) && in_array($category, array_keys($this->whitelistedBlocks))) {
+        return "whitelisted";
+      }
+      elseif (isset($this->blacklistedBlocks) && in_array($category, array_keys($this->blacklistedBlocks))) {
+        return "blacklisted";
+      }
+      elseif ($category_is_restricted) {
+        // If there is no configuration, but the category hasn't been 'allowed',
+        // use 'whitelisted' to preset this as if all blocks were restricted.
+        return "whitelisted";
+      }
+      else {
+        return 'all';
+      }
+    }
+  }
+
+  /**
+   * Business logic to set category to 'all', 'whitelisted' or 'blacklisted'.
+   *
+   * @param string $block_id
+   *   The Drupal block ID.
+   * @param string $category
+   *   The block's category.
+   * @param mixed $temp_data
+   *   The data stored between AJAX submits or null.
+   *
+   * @return bool
+   *   Whether or not the block is stored in the restriction type.
+   */
+  protected function getBlockDefault($block_id, $category, $temp_data) {
+    // Attempt to retrieve default value from tempStore, then from config.
+    if (!is_null($temp_data)) {
+      if (isset($temp_data[$category])) {
+        return in_array($block_id, array_keys($temp_data[$category]['restrictions']));
+      }
+      else {
+        return FALSE;
+      }
+    }
+    else {
+      if (isset($this->whitelistedBlocks[$category])) {
+        return in_array($block_id, $this->whitelistedBlocks[$category]);
+      }
+      if (isset($this->blacklistedBlocks[$category])) {
+        return in_array($block_id, $this->blacklistedBlocks[$category]);
+      }
+      else {
+        return FALSE;
+      }
+    }
+    return FALSE;
+  }
+
+}
diff --git a/modules/layout_builder_restrictions_by_region/src/Form/FormAlter.php b/modules/layout_builder_restrictions_by_region/src/Form/FormAlter.php
new file mode 100644
index 0000000..f42b26d
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/src/Form/FormAlter.php
@@ -0,0 +1,416 @@
+<?php
+
+namespace Drupal\layout_builder_restrictions_by_region\Form;
+
+use Drupal\Component\Serialization\Json;
+use Drupal\Component\Uuid\Php as Uuid;
+use Drupal\Core\Block\BlockManagerInterface;
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Layout\LayoutPluginManagerInterface;
+use Drupal\Core\Plugin\Context\ContextHandlerInterface;
+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\Core\Url;
+use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
+use Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface;
+use Drupal\layout_builder_restrictions\Traits\PluginHelperTrait;
+use Drupal\layout_builder_restrictions_by_region\Traits\LayoutBuilderRestrictionsByRegionHelperTrait;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Supplement form UI to add setting for which blocks & layouts are available.
+ */
+class FormAlter implements ContainerInjectionInterface {
+
+  use PluginHelperTrait;
+  use LayoutBuilderRestrictionsByRegionHelperTrait;
+  use DependencySerializationTrait;
+
+  /**
+   * The section storage manager.
+   *
+   * @var \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface
+   */
+  protected $sectionStorageManager;
+
+  /**
+   * The block manager.
+   *
+   * @var \Drupal\Core\Block\BlockManagerInterface
+   */
+  protected $blockManager;
+
+  /**
+   * The layout manager.
+   *
+   * @var \Drupal\Core\Layout\LayoutPluginManagerInterface
+   */
+  protected $layoutManager;
+
+  /**
+   * The context handler.
+   *
+   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   */
+  protected $contextHandler;
+
+  /**
+   * A service for generating UUIDs.
+   *
+   * @var \Drupal\Component\Uuid\Php
+   */
+  protected $uuid;
+
+  /**
+   * Creates a private temporary storage for a collection.
+   *
+   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   */
+  protected $privateTempStoreFactory;
+
+  /**
+   * FormAlter constructor.
+   *
+   * @param \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface $section_storage_manager
+   *   The section storage manager.
+   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   *   The block manager.
+   * @param \Drupal\Core\Block\LayoutPluginManagerInterface $layout_manager
+   *   The layout plugin manager.
+   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   *   The context handler.
+   * @param \Drupal\Component\Uuid\Php $uuid
+   *   A service for generating UUIDs.
+   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_temp_store_factory
+   *   Creates a private temporary storage for a collection.
+   */
+  public function __construct(SectionStorageManagerInterface $section_storage_manager, BlockManagerInterface $block_manager, LayoutPluginManagerInterface $layout_manager, ContextHandlerInterface $context_handler, Uuid $uuid, PrivateTempStoreFactory $private_temp_store_factory) {
+    $this->sectionStorageManager = $section_storage_manager;
+    $this->blockManager = $block_manager;
+    $this->layoutManager = $layout_manager;
+    $this->contextHandler = $context_handler;
+    $this->uuid = $uuid;
+    $this->privateTempStoreFactory = $private_temp_store_factory;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('plugin.manager.layout_builder.section_storage'),
+      $container->get('plugin.manager.block'),
+      $container->get('plugin.manager.core.layout'),
+      $container->get('context.handler'),
+      $container->get('uuid'),
+      $container->get('tempstore.private')
+    );
+  }
+
+  /**
+   * The actual form elements.
+   */
+  public function alterEntityViewDisplayForm(&$form, FormStateInterface &$form_state, $form_id) {
+    // Create a unique ID for this form build and store it in a hidden
+    // element on the rendered form. This will be used to retrieve data
+    // from tempStore.
+    $user_input = $form_state->getUserInput();
+    if (!isset($user_input['static_id'])) {
+      $static_id = $this->uuid->generate();
+
+      $form['static_id'] = [
+        '#type' => 'hidden',
+        '#value' => $static_id,
+      ];
+    }
+    else {
+      $static_id = $user_input['static_id'];
+    }
+
+    $display = $form_state->getFormObject()->getEntity();
+    $is_enabled = $display->isLayoutBuilderEnabled();
+    if ($is_enabled) {
+      $form['layout']['layout_builder_restrictions']['messages'] = [
+        '#markup' => '<div id="layout-builder-restrictions-messages" class="hidden"></div>',
+      ];
+
+      $form['#entity_builders'][] = [$this, 'entityFormEntityBuild'];
+      // Layout settings.
+      $third_party_settings = $display->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
+      $allowed_layouts = (isset($third_party_settings['allowed_layouts'])) ? $third_party_settings['allowed_layouts'] : [];
+      $layout_form = [
+        '#type' => 'details',
+        '#title' => $this->t('Layouts available for sections'),
+        '#parents' => ['layout_builder_restrictions', 'allowed_layouts'],
+        '#states' => [
+          'disabled' => [
+            ':input[name="layout[enabled]"]' => ['checked' => FALSE],
+          ],
+          'invisible' => [
+            ':input[name="layout[enabled]"]' => ['checked' => FALSE],
+          ],
+        ],
+      ];
+      $layout_form['layout_restriction'] = [
+        '#type' => 'radios',
+        '#options' => [
+          "all" => $this->t('Allow all existing & new layouts.'),
+          "restricted" => $this->t('Allow only specific layouts:'),
+        ],
+        '#default_value' => !empty($allowed_layouts) ? "restricted" : "all",
+      ];
+
+      $entity_view_display_id = $display->get('id');
+      $definitions = $this->getLayoutDefinitions();
+      foreach ($definitions as $plugin_id => $definition) {
+        $enabled = FALSE;
+        if (!empty($allowed_layouts) && in_array($plugin_id, $allowed_layouts)) {
+          $enabled = TRUE;
+        }
+        $layout_form['layouts'][$plugin_id] = [
+          '#type' => 'checkbox',
+          '#default_value' => $enabled,
+          '#description' => [
+            $definition->getIcon(60, 80, 1, 3),
+            [
+              '#type' => 'container',
+              '#children' => $definition->getLabel() . ' (' . $plugin_id . ')',
+            ],
+          ],
+          '#attributes' => [
+            'data-layout-plugin' => [
+              $plugin_id,
+            ],
+          ],
+          '#states' => [
+            'invisible' => [
+              ':input[name="layout_builder_restrictions[allowed_layouts][layout_restriction]"]' => ['value' => "all"],
+            ],
+          ],
+        ];
+      }
+      $form['layout']['layout_builder_restrictions']['allowed_layouts'] = $layout_form;
+
+      // Block settings.
+      $layout_definitions = $definitions;
+
+      foreach ($layout_definitions as $plugin_id => $definition) {
+        $regions = $definition->getRegions();
+        $regions['all_regions'] = [
+          'label' => $this->t('All regions'),
+        ];
+
+        $form['layout'][$plugin_id] = [
+          '#type' => 'details',
+          '#title' => $this->t('Blocks available for the <em>@layout_label</em> layout', ['@layout_label' => $definition->getLabel()]),
+          '#parents' => [
+            'layout_builder_restrictions',
+            'allowed_blocks_by_layout',
+            $plugin_id,
+          ],
+          '#attributes' => [
+            'data-layout-plugin' => $plugin_id,
+          ],
+          '#states' => [
+            'disabled' => [
+              [':input[name="layout[enabled]"]' => ['checked' => FALSE]],
+              'or',
+              ['#edit-layout-builder-restrictions-allowed-layouts :input[data-layout-plugin="' . $plugin_id . '"]' => ['checked' => FALSE]],
+            ],
+            'invisible' => [
+              [':input[name="layout[enabled]"]' => ['checked' => FALSE]],
+              'or',
+              ['#edit-layout-builder-restrictions-allowed-layouts :input[data-layout-plugin="' . $plugin_id . '"]' => ['checked' => FALSE]],
+            ],
+          ],
+        ];
+        $default_restriction_behavior = 'all';
+        if (isset($third_party_settings['whitelisted_blocks'][$plugin_id]) && !isset($third_party_settings['whitelisted_blocks'][$plugin_id]['all_regions'])) {
+          $default_restriction_behavior = 'per-region';
+        }
+        if (isset($third_party_settings['blacklisted_blocks'][$plugin_id]) && !isset($third_party_settings['blacklisted_blocks'][$plugin_id]['all_regions'])) {
+          $default_restriction_behavior = 'per-region';
+        }
+        $form['layout'][$plugin_id]['restriction_behavior'] = [
+          '#type' => 'radios',
+          '#options' => [
+            "all" => $this->t('Apply block restrictions to all regions in layout'),
+            "per-region" => $this->t('Apply block restrictions on a region-by-region basis'),
+          ],
+          '#attributes' => [
+            'class' => [
+              'restriction-type',
+            ],
+            'data-layout-plugin' => $plugin_id,
+          ],
+          '#default_value' => $default_restriction_behavior,
+        ];
+
+        $form['layout'][$plugin_id]['table'] = [
+          '#type' => 'table',
+          '#header' => [
+            $this->t('Region'),
+            $this->t('Status'),
+            $this->t('Operations'),
+          ],
+          '#attributes' => [
+            'data-layout' => $plugin_id,
+          ],
+        ];
+
+        foreach ($regions as $region_id => $region) {
+          $form['layout'][$plugin_id]['table']['#rows'][$region_id] = [
+            'data-region' => $region_id,
+            'data' => [
+              'region_label' => [
+                'class' => [
+                  'region-label',
+                ],
+                'data' => [
+                  '#markup' => $region['label']->render(),
+                ],
+              ],
+              'status' => [
+                'class' => [
+                  'restriction-status',
+                ],
+                'id' => 'restriction-status--' . $plugin_id . '--' . $region_id,
+                'data' => [
+                  '#markup' => '<span class="data">' . $this->RegionRestrictionStatusString($plugin_id, $region_id, $static_id, $entity_view_display_id) . '</span>',
+                ],
+              ],
+              'operations' => [
+                'class' => [
+                  'operations',
+                ],
+                'data' => [
+                  '#type' => 'dropbutton',
+                  '#links' => [
+                    'manage' => [
+                      'title' => $this->t('Manage allowed blocks'),
+                      'url' => Url::fromRoute("layout_builder_restrictions_by_region.{$form['#entity_type']}_allowed_blocks", [
+                        'static_id' => $static_id,
+                        'entity_view_display_id' => $entity_view_display_id,
+                        'layout_plugin' => $plugin_id,
+                        'region_id' => $region_id,
+                      ]),
+                      'attributes' => [
+                        'class' => [
+                          'use-ajax',
+                        ],
+                        'data-dialog-type' => 'modal',
+                        'data-dialog-options' => Json::encode(['width' => 800]),
+                      ],
+                    ],
+                  ],
+                ],
+              ],
+            ],
+          ];
+        }
+      }
+
+      // Add certain variables as form state temp value for later use.
+      $form_state->setTemporaryValue('static_id', $static_id);
+
+      $form['#attached']['library'][] = 'layout_builder_restrictions_by_region/display_mode_form';
+    }
+  }
+
+  /**
+   * Save allowed blocks & layouts for the given entity view mode.
+   */
+  public function entityFormEntityBuild($entity_type_id, LayoutEntityDisplayInterface $display, &$form, FormStateInterface &$form_state) {
+    $static_id = $form_state->getTemporaryValue('static_id');
+
+    // Set allowed layouts.
+    $layout_restriction = $form_state->getValue([
+      'layout_builder_restrictions',
+      'allowed_layouts',
+      'layout_restriction',
+    ]);
+    $allowed_layouts = [];
+    if ($layout_restriction == 'restricted') {
+      $allowed_layouts = array_keys(array_filter($form_state->getValue([
+        'layout_builder_restrictions',
+        'allowed_layouts',
+        'layouts',
+      ])));
+    }
+    $third_party_settings = $display->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region');
+    $third_party_settings['allowed_layouts'] = $allowed_layouts;
+
+    // Set allowed blocks.
+    $tempstore = $this->privateTempStoreFactory;
+    $store = $tempstore->get('layout_builder_restrictions_by_region');
+
+    $layout_definitions = $this->getLayoutDefinitions();
+
+    foreach ($allowed_layouts as $plugin_id) {
+
+      $layout_definition = $layout_definitions[$plugin_id];
+
+      $regions = $layout_definition->getRegions();
+      $regions['all_regions'] = [
+        'label' => $this->t('All regions'),
+      ];
+
+      // Set allowed layouts.
+      $layout_behavior = $form_state->getValue([
+        'layout_builder_restrictions',
+        'allowed_blocks_by_layout',
+        $plugin_id,
+      ]);
+
+      // Handle scenario where all_regions configuration has not been modified
+      // and needs to be preserved.
+      $all_regions_temp = $store->get($static_id . ':' . $plugin_id . ':all_regions');
+      if ($layout_behavior['restriction_behavior'] == 'all' && is_null($all_regions_temp)) {
+        if (isset($third_party_settings['whitelisted_blocks'][$plugin_id]['all_regions'])) {
+          $all_regions_whitelisted = $third_party_settings['whitelisted_blocks'][$plugin_id]['all_regions'];
+        }
+        if (isset($third_party_settings['blacklisted_blocks'][$plugin_id]['all_regions'])) {
+          $all_regions_blacklisted = $third_party_settings['blacklisted_blocks'][$plugin_id]['all_regions'];
+        }
+        unset($third_party_settings['whitelisted_blocks'][$plugin_id]);
+        unset($third_party_settings['blacklisted_blocks'][$plugin_id]);
+        if (isset($all_regions_whitelisted)) {
+          $third_party_settings['whitelisted_blocks'][$plugin_id]['all_regions'] = $all_regions_whitelisted;
+        }
+        if (isset($all_regions_blacklisted)) {
+          $third_party_settings['blacklisted_blocks'][$plugin_id]['all_regions'] = $all_regions_blacklisted;
+        }
+      }
+      else {
+        // Unset 'all_regions'. This will be readded if there is tempstore data.
+        unset($third_party_settings['whitelisted_blocks'][$plugin_id]['all_regions']);
+        unset($third_party_settings['blacklisted_blocks'][$plugin_id]['all_regions']);
+        foreach ($regions as $region_id => $region) {
+          $categories = $store->get($static_id . ':' . $plugin_id . ':' . $region_id);
+          if (!is_null($categories)) {
+            // Unset any existing config for region.
+            unset($third_party_settings['whitelisted_blocks'][$plugin_id][$region_id]);
+            unset($third_party_settings['blacklisted_blocks'][$plugin_id][$region_id]);
+            foreach ($categories as $category => $settings) {
+              $restriction_type = $settings['restriction_type'];
+              // Category is restricted.
+              if (in_array($restriction_type, ['whitelisted', 'blacklisted'])) {
+                if (empty($settings['restrictions'])) {
+                  $third_party_settings[$restriction_type . '_blocks'][$plugin_id][$region_id][$category] = [];
+                }
+                else {
+                  foreach ($settings['restrictions'] as $block_id => $block_setting) {
+                    $third_party_settings[$restriction_type . '_blocks'][$plugin_id][$region_id][$category][] = $block_id;
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+    $display->setThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', $third_party_settings);
+  }
+
+}
diff --git a/modules/layout_builder_restrictions_by_region/src/Plugin/LayoutBuilderRestriction/EntityViewModeRestrictionByRegion.php b/modules/layout_builder_restrictions_by_region/src/Plugin/LayoutBuilderRestriction/EntityViewModeRestrictionByRegion.php
new file mode 100644
index 0000000..adb1f48
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/src/Plugin/LayoutBuilderRestriction/EntityViewModeRestrictionByRegion.php
@@ -0,0 +1,346 @@
+<?php
+
+namespace Drupal\layout_builder_restrictions_by_region\Plugin\LayoutBuilderRestriction;
+
+use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\layout_builder_restrictions\Plugin\LayoutBuilderRestrictionBase;
+use Drupal\layout_builder\OverridesSectionStorageInterface;
+use Drupal\layout_builder\SectionStorageInterface;
+use Drupal\layout_builder_restrictions\Traits\PluginHelperTrait;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * EntityViewModeRestrictionByRegion Plugin.
+ *
+ * @LayoutBuilderRestriction(
+ *   id = "entity_view_mode_restriction_by_region",
+ *   title = @Translation("Per Layout Region"),
+ *   description = @Translation("Restrict blocks to specific regions for each allowed layout. If you enable this after configuring the 'Per Entity View Mode' restriction, you will need to resave each entity's layout restrictions.")
+ * )
+ */
+class EntityViewModeRestrictionByRegion extends LayoutBuilderRestrictionBase {
+
+  use PluginHelperTrait;
+
+  /**
+   * Module handler service.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
+   * Database connection service.
+   *
+   * @var Drupal\Core\Database\Connection
+   */
+  protected $database;
+
+  /**
+   * Constructs a Drupal\Component\Plugin\PluginBase object.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler.
+   * @param Drupal\Core\Database\Connection $connection
+   *   The database connection.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, ModuleHandlerInterface $module_handler, Connection $connection) {
+    $this->configuration = $configuration;
+    $this->pluginId = $plugin_id;
+    $this->pluginDefinition = $plugin_definition;
+    $this->moduleHandler = $module_handler;
+    $this->database = $connection;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('module_handler'),
+      $container->get('database')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function alterBlockDefinitions(array $definitions, array $context) {
+    // If this method is being called by any action other than 'Add block',
+    // then do nothing.
+    // @TODO: Re-assess after https://www.drupal.org/node/3099121
+    // has been addressed.
+    if (!isset($context['delta'])) {
+      return $definitions;
+    }
+    // Respect restrictions on allowed blocks specified by the section storage.
+    if (isset($context['section_storage'])) {
+      $default = $context['section_storage'] instanceof OverridesSectionStorageInterface ? $context['section_storage']->getDefaultSectionStorage() : $context['section_storage'];
+      if ($default instanceof ThirdPartySettingsInterface) {
+        $third_party_settings = $default->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
+        if (empty($third_party_settings)) {
+          // This entity has no restrictions. Look no further.
+          return $definitions;
+        }
+
+        $layout_id = $context['section_storage']->getSection($context['delta'])->getLayoutId();
+        $region = $context['region'];
+
+        $allowed_block_categories = $default->getThirdPartySetting('layout_builder_restrictions', 'allowed_block_categories', []);
+        $whitelisted_blocks = (isset($third_party_settings['whitelisted_blocks'][$layout_id])) ? $third_party_settings['whitelisted_blocks'][$layout_id] : [];
+        $blacklisted_blocks = (isset($third_party_settings['blacklisted_blocks'][$layout_id])) ? $third_party_settings['blacklisted_blocks'][$layout_id] : [];
+
+        // If restriction applies to all regions, then overwrite region
+        // to 'all_regions'.
+        if (isset($whitelisted_blocks['all_regions']) || isset($blacklisted_blocks['all_regions'])) {
+          $region = 'all_regions';
+        }
+
+        // Filter blocks from entity-specific SectionStorage (i.e., UI).
+        $content_block_types_by_uuid = $this->getBlockTypeByUuid();
+
+        if (!empty($whitelisted_blocks) || !empty($blacklisted_blocks)) {
+          foreach ($definitions as $delta => $definition) {
+            $original_delta = $delta;
+            $category = $this->getUntranslatedCategory($definition['category']);
+            // Custom blocks get special treatment.
+            if ($definition['provider'] == 'block_content') {
+              // 'Custom block types' are disregarded if 'Custom blocks'
+              // restrictions are enabled.
+              if (isset($whitelisted_blocks[$region]['Custom blocks']) || isset($blacklisted_blocks[$region]['Custom blocks'])) {
+                $category = 'Custom blocks';
+              }
+              else {
+                $category = 'Custom block types';
+                $delta_exploded = explode(':', $delta);
+                $uuid = $delta_exploded[1];
+                $delta = $content_block_types_by_uuid[$uuid];
+              }
+            }
+            if (in_array($category, array_keys($whitelisted_blocks[$region]))) {
+              if (!in_array($delta, $whitelisted_blocks[$region][$category])) {
+                // The current block is not whitelisted. Remove it.
+                unset($definitions[$original_delta]);
+              }
+            }
+            elseif (in_array($category, array_keys($blacklisted_blocks[$region]))) {
+              if (in_array($delta, $blacklisted_blocks[$region][$category])) {
+                // The current block is blacklisted. Remove it.
+                unset($definitions[$original_delta]);
+              }
+            }
+            elseif ($this->categoryIsRestricted($category, $allowed_block_categories)) {
+              unset($definitions[$original_delta]);
+            }
+          }
+        }
+      }
+    }
+    return $definitions;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function alterSectionDefinitions(array $definitions, array $context) {
+    // Respect restrictions on allowed layouts specified by section storage.
+    if (isset($context['section_storage'])) {
+      $default = $context['section_storage'] instanceof OverridesSectionStorageInterface ? $context['section_storage']->getDefaultSectionStorage() : $context['section_storage'];
+      if ($default instanceof ThirdPartySettingsInterface) {
+        $third_party_settings = $default->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
+        $allowed_layouts = (isset($third_party_settings['allowed_layouts'])) ? $third_party_settings['allowed_layouts'] : [];
+        // Filter blocks from entity-specific SectionStorage (i.e., UI).
+        if (!empty($allowed_layouts)) {
+          $definitions = array_intersect_key($definitions, array_flip($allowed_layouts));
+        }
+      }
+    }
+    return $definitions;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function blockAllowedinContext(SectionStorageInterface $section_storage, $delta_from, $delta_to, $region_to, $block_uuid, $preceding_block_uuid = NULL) {
+    $has_restrictions = FALSE;
+
+    $view_display = $this->getValuefromSectionStorage([$section_storage], 'view_display');
+    $third_party_settings = $view_display->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
+    if (empty($third_party_settings)) {
+      // This entity has no restrictions. Look no further.
+      return TRUE;
+    }
+    // There ARE restrictions. Start by assuming *this* block is not restricted.
+    $has_restrictions = FALSE;
+
+    $bundle = $this->getValuefromSectionStorage([$section_storage], 'bundle');
+
+    // Get "from" section and layout id. (not needed?)
+    $section_from = $section_storage->getSection($delta_from);
+
+    // Get "to" section and layout id.
+    $region = $section_storage->getSection($delta_to);
+    $layout_id = $region->getLayoutId();
+
+    // Get region restrictions.
+    $whitelisted_blocks = (isset($third_party_settings['whitelisted_blocks'][$layout_id])) ? $third_party_settings['whitelisted_blocks'][$layout_id] : [];
+    $blacklisted_blocks = (isset($third_party_settings['blacklisted_blocks'][$layout_id])) ? $third_party_settings['blacklisted_blocks'][$layout_id] : [];
+
+    // If restriction applies to all regions, then overwrite region
+    // to 'all_regions'.
+    if (isset($whitelisted_blocks['all_regions']) || isset($blacklisted_blocks['all_regions'])) {
+      $region_to = 'all_regions';
+    }
+
+    // Get block information.
+    $component = $section_from->getComponent($block_uuid)->toArray();
+    $block_id = $component['configuration']['id'];
+    $block_id_parts = explode(':', $block_id);
+
+    // Load the plugin definition.
+    if ($definition = $this->blockManager()->getDefinition($block_id)) {
+      $category = $this->getUntranslatedCategory($definition['category']);
+
+      if (isset($whitelisted_blocks[$region_to][$category]) || isset($blacklisted_blocks[$region_to][$category])) {
+        // If there is a restriction, assume this block is restricted.
+        // If the block is whitelisted or NOT blacklisted,
+        // the restriction will be removed, below.
+        $has_restrictions = TRUE;
+      }
+      if (!isset($whitelisted_blocks[$region_to][$category]) && !isset($blacklisted_blocks[$region_to][$category]) && $category != "Custom blocks") {
+        // No restrictions have been placed on this category.
+        $has_restrictions = FALSE;
+      }
+      else {
+        // Some type of restriction has been placed.
+        if (isset($whitelisted_blocks[$region_to][$category])) {
+          // An explicitly whitelisted block means it's allowed.
+          if (in_array($block_id, $whitelisted_blocks[$region_to][$category])) {
+            $has_restrictions = FALSE;
+          }
+        }
+        elseif (isset($blacklisted_blocks[$region_to][$category])) {
+          // If absent from the blacklist, it's allowed.
+          if (!in_array($block_id, $blacklisted_blocks[$region_to][$category])) {
+            $has_restrictions = FALSE;
+          }
+        }
+      }
+
+      // Edge case: if block *type* restrictions are present...
+      if (!empty($whitelisted_blocks[$region_to]['Custom block types'])) {
+        $content_block_types_by_uuid = $this->getBlockTypeByUuid();
+        // If no specific custom block restrictions are set
+        // check block type restrict by block type.
+        if ($category == 'Custom blocks' && !isset($whitelisted_blocks[$region_to]['Custom blocks'])) {
+          $block_bundle = $content_block_types_by_uuid[end($block_id_parts)];
+          if (in_array($block_bundle, $whitelisted_blocks[$region_to]['Custom block types'])) {
+            // There are block type restrictions AND
+            // this block type has been whitelisted.
+            $has_restrictions = FALSE;
+          }
+          else {
+            // There are block type restrictions BUT
+            // this block type has NOT been whitelisted.
+            $has_restrictions = TRUE;
+          }
+        }
+      }
+      elseif (!empty($blacklisted_blocks[$region_to]['Custom block types'])) {
+        $content_block_types_by_uuid = $this->getBlockTypeByUuid();
+        // If no specific custom block restrictions are set
+        // check block type restrict by block type.
+        if ($category == 'Custom blocks' && !isset($blacklisted_blocks[$region_to]['Custom blocks'])) {
+          $block_bundle = $content_block_types_by_uuid[end($block_id_parts)];
+          if (in_array($block_bundle, $blacklisted_blocks[$region_to]['Custom block types'])) {
+            // There are block type restrictions AND
+            // this block type has been blacklostlisted.
+            $has_restrictions = TRUE;
+          }
+          else {
+            // There are block type restrictions BUT
+            // this block type has NOT been blacklisted.
+            $has_restrictions = FALSE;
+          }
+        }
+      }
+
+      if ($has_restrictions) {
+        return $this->t("There is a restriction on %block placement in the %layout %region region for %type content.", [
+          "%block" => $definition['admin_label'],
+          "%layout" => $layout_id,
+          "%region" => $region_to,
+          "%type" => $bundle,
+        ]);
+      }
+    }
+
+    // Default: this block is not restricted.
+    return TRUE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function inlineBlocksAllowedinContext(SectionStorageInterface $section_storage, $delta, $region) {
+    $view_display = $this->getValuefromSectionStorage([$section_storage], 'view_display');
+    $third_party_settings = $view_display->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
+    $whitelisted_blocks = (isset($third_party_settings['whitelisted_blocks'])) ? $third_party_settings['whitelisted_blocks'] : [];
+    $blacklisted_blocks = (isset($third_party_settings['blacklisted_blocks'])) ? $third_party_settings['blacklisted_blocks'] : [];
+
+    $layout_id = $section_storage->getSection($delta)->getLayoutId();
+
+    // If restriction behavior is for all regions, then overwrite
+    // region with 'all_regions'.
+    if (isset($third_party_settings['whitelisted_blocks'][$layout_id]['all_regions']) || isset($third_party_settings['blacklisted_blocks'][$layout_id]['all_regions'])) {
+      $region = 'all_regions';
+    }
+
+    // Check if allowed inline blocks are defined in config.
+    if (isset($whitelisted_blocks[$layout_id][$region]['Inline blocks'])) {
+      return $whitelisted_blocks[$layout_id][$region]['Inline blocks'];
+    }
+    // If not, then allow some inline blocks and check for blacklisting.
+    else {
+      $inline_blocks = $this->getInlineBlockPlugins();
+      if (isset($blacklisted_blocks[$layout_id][$region]['Inline blocks'])) {
+        foreach ($inline_blocks as $key => $block) {
+          // Unset explicitly blacklisted inline blocks.
+          if (in_array($block, $blacklisted_blocks[$layout_id][$region]['Inline blocks'])) {
+            unset($inline_blocks[$key]);
+          }
+        }
+      }
+      return $inline_blocks;
+    }
+  }
+
+  /**
+   * Helper function to retrieve uuid->type keyed block array.
+   *
+   * @return str[]
+   *   A key-value array of uuid-block type.
+   */
+  private function getBlockTypeByUuid() {
+    if ($this->moduleHandler->moduleExists('block_content')) {
+      // Pre-load all reusable blocks by UUID to retrieve block type.
+      $query = $this->database->select('block_content', 'b')
+        ->fields('b', ['uuid', 'type']);
+      $results = $query->execute();
+      return $results->fetchAllKeyed(0, 1);
+    }
+    return [];
+  }
+
+}
diff --git a/modules/layout_builder_restrictions_by_region/src/Routing/RouteSubscriber.php b/modules/layout_builder_restrictions_by_region/src/Routing/RouteSubscriber.php
new file mode 100644
index 0000000..cd279f2
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/src/Routing/RouteSubscriber.php
@@ -0,0 +1,59 @@
+<?php
+
+namespace Drupal\layout_builder_restrictions_by_region\Routing;
+
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Routing\RouteSubscriberBase;
+use Symfony\Component\Routing\Route;
+use Symfony\Component\Routing\RouteCollection;
+
+/**
+ * Subscriber for Layout Builder Restrictions By Region routes.
+ *
+ * Adapted from: Drupal\field_ui\Routing\RouteSubscriber.
+ */
+class RouteSubscriber extends RouteSubscriberBase {
+
+  /**
+   * The entity type manager service.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * Constructs a RouteSubscriber object.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager service.
+   */
+  public function __construct(EntityTypeManagerInterface $entity_type_manager) {
+    $this->entityTypeManager = $entity_type_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function alterRoutes(RouteCollection $collection) {
+    foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
+      if ($route_name = $entity_type->get('field_ui_base_route')) {
+        // Try to get the route from the current collection.
+        if (!$collection->get($route_name)) {
+          continue;
+        }
+
+        $route = new Route(
+          "/admin/layout-builder-restrictions/layout-builder-restrictions-by-region/{$entity_type_id}/allowed-blocks-form",
+          [
+            '_form' => '\Drupal\layout_builder_restrictions_by_region\Form\AllowedBlocksForm',
+            '_title' => 'Allowed Blocks',
+          ],
+          ['_permission' => 'administer ' . $entity_type_id . ' display']
+        );
+        $collection->add("layout_builder_restrictions_by_region.{$entity_type_id}_allowed_blocks", $route);
+      }
+    }
+
+  }
+
+}
diff --git a/modules/layout_builder_restrictions_by_region/src/Traits/LayoutBuilderRestrictionsByRegionHelperTrait.php b/modules/layout_builder_restrictions_by_region/src/Traits/LayoutBuilderRestrictionsByRegionHelperTrait.php
new file mode 100644
index 0000000..2c597df
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/src/Traits/LayoutBuilderRestrictionsByRegionHelperTrait.php
@@ -0,0 +1,117 @@
+<?php
+
+namespace Drupal\layout_builder_restrictions_by_region\Traits;
+
+/**
+ * Methods to help Layout Builder Restrictions By Region plugin.
+ */
+trait LayoutBuilderRestrictionsByRegionHelperTrait {
+
+  /**
+   * Checks if any restrictions are enabled for a given region.
+   *
+   * Either $static_id or $entity_view_display_id is required.
+   *
+   * @param string $layout_plugin
+   *   The machine name of the layout plugin.
+   * @param string $region_id
+   *   The machine name of the region.
+   * @param mixed $static_id
+   *   (optional) A unique string representing a built form; optionally NULL.
+   * @param mixed $entity_view_display_id
+   *   (optional) The ID of the entity view display; optionally NULL.
+   *
+   * @return bool
+   *   A boolean indicating whether or not a region has restrictions.
+   */
+  protected function regionRestrictionStatus(string $layout_plugin, string $region_id, $static_id = NULL, $entity_view_display_id = NULL) {
+    if (is_null($static_id) && is_null($entity_view_display_id)) {
+      throw new Exception("Either a static ID or a entity view display ID must be provided.");
+    }
+    $region_categories = NULL;
+    $region_restricted = FALSE;
+
+    // Attempt to retrieve config from tempstore.
+    $tempstore = $this->privateTempStoreFactory();
+    $store = $tempstore->get('layout_builder_restrictions_by_region');
+    // If tempstore return is null, then no record is found.
+    // If tempstore returns something other than null, then a record is found.
+    // If tempstore returns an empty array, then a record is found with
+    // no restrictions.
+    $region_categories = $store->get($static_id . ':' . $layout_plugin . ':' . $region_id);
+
+    if (!is_null($region_categories)) {
+      $region_restricted = (empty($region_categories)) ? FALSE : TRUE;
+    }
+    // If no record in tempstore, then check stored config.
+    else {
+      $display = $this->entityTypeManager()
+        ->getStorage('entity_view_display')
+        ->load($entity_view_display_id);
+
+      $third_party_settings = $display->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
+      if (isset($third_party_settings['whitelisted_blocks'][$layout_plugin][$region_id])) {
+        return TRUE;
+      }
+      elseif (isset($third_party_settings['blacklisted_blocks'][$layout_plugin][$region_id])) {
+        if (!empty($third_party_settings['blacklisted_blocks'][$layout_plugin][$region_id])) {
+          return TRUE;
+        }
+        else {
+          return FALSE;
+        }
+      }
+      return FALSE;
+    }
+
+    return $region_restricted;
+  }
+
+  /**
+   * Wrapper function for regionRestrictionStatus() that returns a string.
+   *
+   * Either $static_id or $entity_view_display_id is required.
+   *
+   * @param string $layout_plugin
+   *   The machine name of the layout plugin.
+   * @param string $region_id
+   *   The machine name of the region.
+   * @param mixed $static_id
+   *   (optional) A unique string representing a built form; optionally NULL.
+   * @param mixed $entity_view_display_id
+   *   (optional) The ID of the entity view display; optionally NULL.
+   *
+   * @return string
+   *   Either 'Restricted' or 'Unrestricted'.
+   */
+  protected function regionRestrictionStatusString(string $layout_plugin, string $region_id, $static_id = NULL, $entity_view_display_id = NULL) {
+    $restriction = $this->regionRestrictionStatus($layout_plugin, $region_id, $static_id, $entity_view_display_id);
+    if ($restriction == TRUE) {
+      return 'Restricted';
+    }
+    elseif ($restriction == FALSE) {
+      return 'Unrestricted';
+    }
+  }
+
+  /**
+   * Gets the entity type manager.
+   *
+   * @return \Drupal\Core\Entity\EntityTypeManager
+   *   Manages entity type plugin definitions.
+   */
+  protected function entityTypeManager() {
+    return $this->entityTypeManager ?? \Drupal::service('entity_type.manager');
+  }
+
+  /**
+   * Gets the private tempStore.
+   *
+   * @return \Drupal\Core\TempStore\PrivateTempStoreFactory
+   *   Creates a private temporary storage for a collection.
+   */
+  protected function privateTempStoreFactory() {
+    return $this->privateTempStoreFactory ?? \Drupal::service('tempstore.private');
+  }
+
+}
diff --git a/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/BlockPlacementBlacklistTest.php b/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/BlockPlacementBlacklistTest.php
new file mode 100644
index 0000000..75c80a6
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/BlockPlacementBlacklistTest.php
@@ -0,0 +1,669 @@
+<?php
+
+namespace Drupal\Tests\layout_builder_restrictions_by_region\FunctionalJavascript;
+
+use Drupal\block_content\Entity\BlockContent;
+use Drupal\block_content\Entity\BlockContentType;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+
+/**
+ * Demonstrate that blocks can be individually restricted.
+ *
+ * @group layout_builder_restrictions_by_region
+ */
+class BlockPlacementBlacklistTest extends WebDriverTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $modules = [
+    'block',
+    'layout_builder',
+    'layout_builder_restrictions',
+    'layout_builder_restrictions_by_region',
+    'node',
+    'field_ui',
+    'block_content',
+  ];
+
+  /**
+   * Specify the theme to be used in testing.
+   *
+   * @var string
+   */
+  protected $defaultTheme = 'classy';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    // Create a node bundle.
+    $this->createContentType(['type' => 'bundle_with_section_field']);
+
+    $this->drupalLogin($this->drupalCreateUser([
+      'access administration pages',
+      'administer blocks',
+      'administer node display',
+      'administer node fields',
+      'configure any layout',
+      'configure layout builder restrictions',
+      'create and edit custom blocks',
+    ]));
+
+    // Enable entity_view_mode_restriction_by_region plugin.
+    // Disable entity_view_mode_restriction plugin.
+    $layout_builder_restrictions_plugins = [
+      'entity_view_mode_restriction' => [
+        'weight' => 1,
+        'enabled' => FALSE,
+      ],
+      'entity_view_mode_restriction_by_region' => [
+        'weight' => 0,
+        'enabled' => TRUE,
+      ],
+    ];
+    $config = \Drupal::service('config.factory')->getEditable('layout_builder_restrictions.plugins');
+    $config->set('plugin_config', $layout_builder_restrictions_plugins)->save();
+  }
+
+  /**
+   * Verify that both tempstore and config storage function correctly.
+   */
+  public function testBlockRestrictionStorage() {
+    $this->blockTestSetup();
+
+    $this->getSession()->resizeWindow(1200, 4000);
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+    $field_ui_prefix = 'admin/structure/types/manage/bundle_with_section_field';
+
+    // From the manage display page, go to manage the layout.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Checking is_enable will show allow_custom.
+    $page->checkField('layout[enabled]');
+    $page->checkField('layout[allow_custom]');
+    $page->pressButton('Save');
+    $assert_session->linkExists('Manage layout');
+
+    // Only allow two-column layout.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+
+    // Verify form behavior when restriction is applied to all regions.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $assert_session->checkboxChecked('edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-all');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'All regions');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+
+    // Verify form behavior when restriction is applied on a per-region basis.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region"]');
+    $element->click();
+    $assert_session->checkboxChecked('edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'First');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'Unrestricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Second');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+
+    // Test temporary storage.
+    // Add restriction to First region.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+
+    // Restrict all 'Content' fields from options.
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-allowed-blocks-content-fields-restriction-whitelisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Verify First region is 'Restricted' and Second region
+    // remains 'Unrestricted'.
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'Restricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+
+    // Reload First region allowed block form to verify temp storage.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxNotChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxChecked('Allow specific Content fields blocks (whitelist):');
+    $page->pressButton('Close');
+
+    // Load Second region allowed block form to verify temp storage.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $page->pressButton('Close');
+
+    // Verify All Regions unaffected.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-all"]');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $page->pressButton('Close');
+
+    // Switch back to Per-region restrictions prior to saving.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region"]');
+    $element->click();
+
+    // Allow one-column layout.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-onecol"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol"]/summary');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+    // Save to config.
+    $page->pressButton('Save');
+
+    // Verify no block restrictions bleed to other layouts/regions upon save
+    // to database.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Check two-column layout.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'Restricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+
+    // Verify All Regions unaffected.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-all"]');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+
+    // Check one-column layout.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol"]/summary');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+  }
+
+  /**
+   * Verify that the UI can restrict blocks in Layout Builder settings tray.
+   */
+  public function testBlockRestriction() {
+    $this->blockTestSetup();
+
+    $this->getSession()->resizeWindow(1200, 4000);
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+    $field_ui_prefix = 'admin/structure/types/manage/bundle_with_section_field';
+
+    // From the manage display page, go to manage the layout.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Checking is_enable will show allow_custom.
+    $page->checkField('layout[enabled]');
+    $page->checkField('layout[allow_custom]');
+    $page->pressButton('Save');
+    $assert_session->linkExists('Manage layout');
+
+    // Only allow two-column layout.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+
+    // Switch to per-region restriction.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region"]');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'Restricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+    $page->pressButton('Save');
+
+    $this->clickLink('Manage layout');
+    // Remove default one-column layout and replace with two-column layout.
+    $this->clickLink('Remove Section 1');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Remove');
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->clickLink('Add section');
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->clickLink('Two column');
+    $assert_session->assertWaitOnAjaxRequest();
+    $element = $page->find('xpath', '//*[contains(@class, "ui-dialog-off-canvas")]//*[starts-with(@id,"edit-actions-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Select 'Add block' link in First region.
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Initially, the body field is available.
+    $assert_session->linkExists('Body');
+    // Initially, custom blocks instances are available.
+    $assert_session->linkExists('Basic Block 1');
+    $assert_session->linkExists('Basic Block 2');
+    $assert_session->linkExists('Alternate Block 1');
+    // Initially, all inline block types are allowed.
+    $this->clickLink('Create custom block');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Basic');
+    $assert_session->linkExists('Alternate');
+    $page->pressButton('Close');
+    $page->pressButton('Save');
+
+    // Load Allowed Blocks form for First region.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Impose Custom Block type restrictions.
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Restrict specific Content fields blocks (blacklist):');
+    $assert_session->checkboxChecked('Allow all existing & new Custom block types blocks.');
+    $assert_session->checkboxNotChecked('Restrict specific Custom block types blocks (blacklist):');
+
+    // Set 'Content' fields to blacklisted, but do not restrict.
+    $element = $page->find('xpath', '//*[contains(@class, "form-item-allowed-blocks-content-fields-restriction")]/input[@value="blacklisted"]');
+    $element->click();
+    // Set block types to blacklisted, but do not restrict.
+    $element = $page->find('xpath', '//*[contains(@class, "form-item-allowed-blocks-custom-block-types-restriction")]/input[@value="blacklisted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+
+    // Select 'Add block' link in First region.
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Body');
+    $assert_session->linkExists('Basic Block 1');
+    $assert_session->linkExists('Basic Block 2');
+    $assert_session->linkExists('Alternate Block 1');
+    // Inline block types are still allowed.
+    $this->clickLink('Create custom block');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Basic');
+    $assert_session->linkExists('Alternate');
+
+    // Impose Inline Block type & Content restrictions.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Load Allowed Blocks form for First region.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Restrict specific Content fields blocks (blacklist):');
+    $assert_session->checkboxNotChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxChecked('Allow all existing & new Inline blocks blocks.');
+    $assert_session->checkboxNotChecked('Restrict specific Inline blocks blocks (blacklist):');
+
+    // Blacklist inline, custom, and content blocks.
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-inline-blocks-restriction-blacklisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-custom-blocks-restriction-blacklisted--")]');
+    $element->click();
+    $inline_blocks = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-inline-blocks-allowed-blocks-inline-block")]');
+    foreach ($inline_blocks as $block) {
+      $block->click();
+    }
+    $content_fields = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-content-fields-allowed-blocks-")]');
+    foreach ($content_fields as $block) {
+      $block->click();
+    }
+    $custom_blocks = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-custom-blocks-allowed-blocks-")]');
+    foreach ($custom_blocks as $block) {
+      $block->click();
+    }
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    // Check independent restrictions on Custom block and Inline blocks.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->linkNotExists('Body');
+    $assert_session->linkNotExists('Basic Block 1');
+    $assert_session->linkNotExists('Basic Block 2');
+    $assert_session->linkNotExists('Alternate Block 1');
+    // Inline block types are not longer allowed.
+    $assert_session->linkNotExists('Create custom block');
+
+    // Blacklist some blocks / block types.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxChecked('Restrict specific Content fields blocks (blacklist):');
+
+    // Un-blaclist the 'body' field as an option.
+    $page->uncheckField('allowed_blocks[Content fields][allowed_blocks][field_block:node:bundle_with_section_field:body]');
+    // Un-blacklist "basic" Custom block types.
+    $page->uncheckField('allowed_blocks[Custom block types][allowed_blocks][basic]');
+    // Un-blacklist all custom blocks.
+    $custom_blocks = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-custom-blocks-allowed-blocks-")]');
+    foreach ($custom_blocks as $block) {
+      $block->click();
+    }
+    // Un-blacklist "alternate" Inline block type.
+    $page->uncheckField('allowed_blocks[Inline blocks][allowed_blocks][inline_block:alternate]');
+
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+    $this->clickLink('Add block');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Body');
+    // ... but other 'content' fields aren't.
+    $assert_session->linkNotExists('Promoted to front page');
+    $assert_session->linkNotExists('Sticky at top of lists');
+    // "Basic" Custom blocks are allowed.
+    $assert_session->linkExists('Basic Block 1');
+    $assert_session->linkExists('Basic Block 2');
+    // Only the basic inline block type is allowed.
+    $this->clickLink('Create custom block');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Basic');
+    $assert_session->linkExists('Alternate');
+
+    // Custom block instances take precedence over custom block type setting.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-custom-blocks-restriction-blacklisted--")]');
+    $element->click();
+    $custom_blocks = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-custom-blocks-allowed-blocks-")]');
+    foreach ($custom_blocks as $block) {
+      $block->click();
+    }
+    // Allow Alternate Block 1.
+    $page->uncheckField('allowed_blocks[Custom blocks][allowed_blocks][block_content:' . $this->blocks['Alternate Block 1'] . ']');
+    // Allow Basic Block 1.
+    $page->uncheckField('allowed_blocks[Custom blocks][allowed_blocks][block_content:' . $this->blocks['Basic Block 1'] . ']');
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Basic Block 1');
+    $assert_session->linkNotExists('Basic Block 2');
+    $assert_session->linkExists('Alternate Block 1');
+
+    // Next, add restrictions to another region and verify no contamination
+    // between regions.
+    // Add restriction to Second region.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // System blocks are disallowed.
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-system-restriction-whitelisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Powered by Drupal');
+    $page->pressButton('Close');
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--second")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Powered by Drupal');
+    $page->pressButton('Close');
+
+    // Next, allow a three-column layout and verify no contamination.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-threecol-section"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section"]/summary');
+    $element->click();
+    // Restrict on a per-region basis.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-restriction-behavior-per-region"]');
+    $element->click();
+
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="first"]', 'First');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="first"]', 'Unrestricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="second"]', 'Second');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="third"]', 'Third');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="third"]', 'Unrestricted');
+
+    // Manage restrictions for First region.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new Custom blocks blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Custom blocks blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new Inline blocks blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Inline blocks blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new System blocks.');
+    $assert_session->checkboxNotChecked('Allow specific System blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new core blocks.');
+    $assert_session->checkboxNotChecked('Allow specific core blocks (whitelist):');
+
+    // Disallow Core blocks in the ThreeCol first region.
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-core-restriction-blacklisted--")]');
+    $element->click();
+    $core_blocks = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-core-blocks-allowed-blocks-")]');
+    foreach ($core_blocks as $block) {
+      $block->click();
+    }
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="third"]', 'Third');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="third"]', 'Restricted');
+    $page->pressButton('Save');
+
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Primary admin actions');
+    $page->pressButton('Close');
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--second")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Primary admin actions');
+    $page->pressButton('Close');
+
+    // Add three-column layout below existing section.
+    $element = $page->find('xpath', '//*[@data-layout-builder-highlight-id="section-1"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->clickLink('Three column');
+    $assert_session->assertWaitOnAjaxRequest();
+    $element = $page->find('xpath', '//*[contains(@class, "ui-dialog-off-canvas")]//*[starts-with(@id,"edit-actions-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->clickLink('Manage layout');
+    // Verify core blocks are unavailable to First region in
+    // three-column layout.
+    $element = $page->find('xpath', '//*[contains(@class, "layout--threecol-section")]/*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->linkNotExists('Primary admin actions');
+
+    // Finally, test all_regions functionality.
+    $this->drupalGet("$field_ui_prefix/display/default");
+
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    // Switch Two-column layout restrictions to all regions.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-all"]');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+    $page->pressButton('Save');
+
+    // Verify no restrictions.
+    $this->clickLink('Manage layout');
+    $element = $page->find('xpath', '//*[contains(@class, "layout--twocol-section")]/*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Promoted to front page');
+    $page->pressButton('Close');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout--twocol-section")]/*[contains(@class, "layout__region--second")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Promoted to front page');
+    $page->pressButton('Close');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    // Add a restriction for all_regions.
+    $this->drupalGet("$field_ui_prefix/display/default");
+
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Restrict specific Content fields blocks (blacklist):');
+
+    $element = $page->find('xpath', '//*[contains(@class, "form-item-allowed-blocks-content-fields-restriction")]/input[@value="blacklisted"]');
+    $element->click();
+    $content_fields = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-content-fields-allowed-blocks-")]');
+    foreach ($content_fields as $block) {
+      $block->click();
+    }
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    // Verify restrictions applied to both regions.
+    $this->clickLink('Manage layout');
+    $element = $page->find('xpath', '//*[contains(@class, "layout--twocol-section")]/*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Promoted to front page');
+    $page->pressButton('Close');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout--twocol-section")]/*[contains(@class, "layout__region--second")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Promoted to front page');
+    $page->pressButton('Close');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $page->pressButton('Save');
+  }
+
+  /**
+   * Helper function to set up block restriction-related tests.
+   */
+  protected function blockTestSetup() {
+    // Create 2 custom block types, with 3 block instances.
+    $bundle = BlockContentType::create([
+      'id' => 'basic',
+      'label' => 'Basic',
+    ]);
+    $bundle->save();
+    $bundle = BlockContentType::create([
+      'id' => 'alternate',
+      'label' => 'Alternate',
+    ]);
+    $bundle->save();
+    block_content_add_body_field($bundle->id());
+    $blocks = [
+      'Basic Block 1' => 'basic',
+      'Basic Block 2' => 'basic',
+      'Alternate Block 1' => 'alternate',
+    ];
+    foreach ($blocks as $info => $type) {
+      $block = BlockContent::create([
+        'info' => $info,
+        'type' => $type,
+        'body' => [
+          [
+            'value' => 'This is the block content',
+            'format' => filter_default_format(),
+          ],
+        ],
+      ]);
+      $block->save();
+      $blocks[$info] = $block->uuid();
+    }
+    $this->blocks = $blocks;
+  }
+
+}
diff --git a/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/BlockPlacementWhitelistTest.php b/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/BlockPlacementWhitelistTest.php
new file mode 100644
index 0000000..6594763
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/BlockPlacementWhitelistTest.php
@@ -0,0 +1,686 @@
+<?php
+
+namespace Drupal\Tests\layout_builder_restrictions_by_region\FunctionalJavascript;
+
+use Drupal\block_content\Entity\BlockContent;
+use Drupal\block_content\Entity\BlockContentType;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+
+/**
+ * Demonstrate that blocks can be individually restricted.
+ *
+ * @group layout_builder_restrictions_by_region
+ */
+class BlockPlacementWhitelistTest extends WebDriverTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $modules = [
+    'block',
+    'layout_builder',
+    'layout_builder_restrictions',
+    'layout_builder_restrictions_by_region',
+    'node',
+    'field_ui',
+    'block_content',
+  ];
+
+  /**
+   * Specify the theme to be used in testing.
+   *
+   * @var string
+   */
+  protected $defaultTheme = 'classy';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    // Create a node bundle.
+    $this->createContentType(['type' => 'bundle_with_section_field']);
+
+    $this->drupalLogin($this->drupalCreateUser([
+      'access administration pages',
+      'administer blocks',
+      'administer node display',
+      'administer node fields',
+      'configure any layout',
+      'configure layout builder restrictions',
+      'create and edit custom blocks',
+    ]));
+
+    // Enable entity_view_mode_restriction_by_region plugin.
+    // Disable entity_view_mode_restriction plugin.
+    $layout_builder_restrictions_plugins = [
+      'entity_view_mode_restriction' => [
+        'weight' => 1,
+        'enabled' => FALSE,
+      ],
+      'entity_view_mode_restriction_by_region' => [
+        'weight' => 0,
+        'enabled' => TRUE,
+      ],
+    ];
+    $config = \Drupal::service('config.factory')->getEditable('layout_builder_restrictions.plugins');
+    $config->set('plugin_config', $layout_builder_restrictions_plugins)->save();
+  }
+
+  /**
+   * Verify that both tempstore and config storage function correctly.
+   */
+  public function testBlockRestrictionStorage() {
+    $this->blockTestSetup();
+
+    $this->getSession()->resizeWindow(1200, 4000);
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+    $field_ui_prefix = 'admin/structure/types/manage/bundle_with_section_field';
+
+    // From the manage display page, go to manage the layout.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Checking is_enable will show allow_custom.
+    $page->checkField('layout[enabled]');
+    $page->checkField('layout[allow_custom]');
+    $page->pressButton('Save');
+    $assert_session->linkExists('Manage layout');
+
+    // Only allow two-column layout.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+
+    // Verify form behavior when restriction is applied to all regions.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $assert_session->checkboxChecked('edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-all');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'All regions');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+
+    // Verify form behavior when restriction is applied on a per-region basis.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region"]');
+    $element->click();
+    $assert_session->checkboxChecked('edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'First');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'Unrestricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Second');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+
+    // Test temporary storage.
+    // Add restriction to First region.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+
+    // Restrict all 'Content' fields from options.
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-allowed-blocks-content-fields-restriction-whitelisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Verify First region is 'Restricted' and Second region
+    // remains 'Unrestricted'.
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'Restricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+
+    // Reload First region allowed block form to verify temp storage.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxNotChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxChecked('Allow specific Content fields blocks (whitelist):');
+    $page->pressButton('Close');
+
+    // Load Second region allowed block form to verify temp storage.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $page->pressButton('Close');
+
+    // Verify All Regions unaffected.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-all"]');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $page->pressButton('Close');
+
+    // Switch back to Per-region restrictions prior to saving.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region"]');
+    $element->click();
+
+    // Allow one-column layout.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-onecol"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol"]/summary');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+    // Save to config.
+    $page->pressButton('Save');
+
+    // Verify no block restrictions bleed to other layouts/regions upon save
+    // to database.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Check two-column layout.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'Restricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+
+    // Verify All Regions unaffected.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-all"]');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+
+    // Check one-column layout.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol"]/summary');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+  }
+
+  /**
+   * Verify that the UI can restrict blocks in Layout Builder settings tray.
+   */
+  public function testBlockRestriction() {
+    $this->blockTestSetup();
+
+    $this->getSession()->resizeWindow(1200, 4000);
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+    $field_ui_prefix = 'admin/structure/types/manage/bundle_with_section_field';
+
+    // From the manage display page, go to manage the layout.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Checking is_enable will show allow_custom.
+    $page->checkField('layout[enabled]');
+    $page->checkField('layout[allow_custom]');
+    $page->pressButton('Save');
+    $assert_session->linkExists('Manage layout');
+
+    // Only allow two-column layout.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+
+    // Switch to per-region restriction.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region"]');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]', 'Restricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+    $page->pressButton('Save');
+
+    $this->clickLink('Manage layout');
+    // Remove default one-column layout and replace with two-column layout.
+    $this->clickLink('Remove Section 1');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Remove');
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->clickLink('Add section');
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->clickLink('Two column');
+    $assert_session->assertWaitOnAjaxRequest();
+    $element = $page->find('xpath', '//*[contains(@class, "ui-dialog-off-canvas")]//*[starts-with(@id,"edit-actions-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Select 'Add block' link in First region.
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Initially, the body field is available.
+    $assert_session->linkExists('Body');
+    // Initially, custom blocks instances are available.
+    $assert_session->linkExists('Basic Block 1');
+    $assert_session->linkExists('Basic Block 2');
+    $assert_session->linkExists('Alternate Block 1');
+    // Initially, all inline block types are allowed.
+    $this->clickLink('Create custom block');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Basic');
+    $assert_session->linkExists('Alternate');
+    $page->pressButton('Close');
+    $page->pressButton('Save');
+
+    // Load Allowed Blocks form for First region.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-per-region"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // Impose Custom Block type restrictions.
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new Custom block types blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Custom block types blocks (whitelist):');
+
+    // Restrict all 'Content' fields from options.
+    $element = $page->find('xpath', '//*[contains(@class, "form-item-allowed-blocks-content-fields-restriction")]/input[@value="whitelisted"]');
+    $element->click();
+    // Restrict all Custom block types from options.
+    $element = $page->find('xpath', '//*[contains(@class, "form-item-allowed-blocks-custom-block-types-restriction")]/input[@value="whitelisted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+
+    // Select 'Add block' link in First region.
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Body');
+    $assert_session->linkNotExists('Basic Block 1');
+    $assert_session->linkNotExists('Basic Block 2');
+    $assert_session->linkNotExists('Alternate Block 1');
+    // Inline block types are still allowed.
+    $this->clickLink('Create custom block');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Basic');
+    $assert_session->linkExists('Alternate');
+
+    // Impose Inline Block type restrictions.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Load Allowed Blocks form for First region.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow specific Content fields blocks (whitelist):');
+    $assert_session->checkboxNotChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxChecked('Allow all existing & new Inline blocks blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Inline blocks blocks (whitelist):');
+
+    // Restrict all Inline blocks from options.
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-inline-blocks-restriction-whitelisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    // Check independent restrictions on Custom block and Inline blocks.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->linkNotExists('Body');
+    $assert_session->linkNotExists('Basic Block 1');
+    $assert_session->linkNotExists('Basic Block 2');
+    $assert_session->linkNotExists('Alternate Block 1');
+    // Inline block types are not longer allowed.
+    $assert_session->linkNotExists('Create custom block');
+
+    // Whitelist some blocks / block types.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->checkboxChecked('Allow specific Content fields blocks (whitelist):');
+
+    // Allow only 'body' field as an option.
+    $page->checkField('allowed_blocks[Content fields][allowed_blocks][field_block:node:bundle_with_section_field:body]');
+    // Whitelist all "basic" Custom block types.
+    $page->checkField('allowed_blocks[Custom block types][allowed_blocks][basic]');
+    // Whitelist "alternate" Inline block type.
+    $page->checkField('allowed_blocks[Inline blocks][allowed_blocks][inline_block:alternate]');
+
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+    $this->clickLink('Add block');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Body');
+    // ... but other 'content' fields aren't.
+    $assert_session->linkNotExists('Promoted to front page');
+    $assert_session->linkNotExists('Sticky at top of lists');
+    // "Basic" Custom blocks are allowed.
+    $assert_session->linkExists('Basic Block 1');
+    $assert_session->linkExists('Basic Block 2');
+    // ... but "alternate" Custom blocks are disallowed.
+    $assert_session->linkNotExists('Alternate Block 1');
+    // Only the basic inline block type is allowed.
+    $this->clickLink('Create custom block');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Basic');
+    $assert_session->linkExists('Alternate');
+
+    // Custom block instances take precedence over custom block type setting.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-custom-blocks-restriction-whitelisted--")]');
+    $element->click();
+    // Allow Alternate Block 1.
+    $page->checkField('allowed_blocks[Custom blocks][allowed_blocks][block_content:' . $this->blocks['Alternate Block 1'] . ']');
+    // Allow Basic Block 1.
+    $page->checkField('allowed_blocks[Custom blocks][allowed_blocks][block_content:' . $this->blocks['Basic Block 1'] . ']');
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Basic Block 1');
+    $assert_session->linkNotExists('Basic Block 2');
+    $assert_session->linkExists('Alternate Block 1');
+
+    // Next, add restrictions to another region and verify no contamination
+    // between regions.
+    // Add restriction to Second region.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="second"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    // System blocks are disallowed.
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-system-restriction-whitelisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Powered by Drupal');
+    $page->pressButton('Close');
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--second")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Powered by Drupal');
+    $page->pressButton('Close');
+
+    // Next, allow a three-column layout and verify no contamination.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-threecol-section"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section"]/summary');
+    $element->click();
+    // Restrict on a per-region basis.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-restriction-behavior-per-region"]');
+    $element->click();
+
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="first"]', 'First');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="first"]', 'Unrestricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="second"]', 'Second');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="second"]', 'Unrestricted');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="third"]', 'Third');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="third"]', 'Unrestricted');
+
+    // Manage restrictions for First region.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="first"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new Custom blocks blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Custom blocks blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new Inline blocks blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Inline blocks blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new System blocks.');
+    $assert_session->checkboxNotChecked('Allow specific System blocks (whitelist):');
+    $assert_session->checkboxChecked('Allow all existing & new core blocks.');
+    $assert_session->checkboxNotChecked('Allow specific core blocks (whitelist):');
+
+    // Disallow Core blocks.
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-core-restriction-whitelisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="third"]', 'Third');
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-threecol-section-table"]/tbody/tr[@data-region="third"]', 'Restricted');
+    $page->pressButton('Save');
+
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Primary admin actions');
+    $page->pressButton('Close');
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout__region--second")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Primary admin actions');
+    $page->pressButton('Close');
+
+    // Add three-column layout below existing section.
+    $element = $page->find('xpath', '//*[@data-layout-builder-highlight-id="section-1"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->clickLink('Three column');
+    $assert_session->assertWaitOnAjaxRequest();
+    $element = $page->find('xpath', '//*[contains(@class, "ui-dialog-off-canvas")]//*[starts-with(@id,"edit-actions-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $this->clickLink('Manage layout');
+    // Verify core blocks are unavailable to First region in
+    // three-column layout.
+    $element = $page->find('xpath', '//*[contains(@class, "layout--threecol-section")]/*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->linkNotExists('Primary admin actions');
+
+    // Finally, test all_regions functionality.
+    $this->drupalGet("$field_ui_prefix/display/default");
+
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    // Switch Two-column layout restrictions to all regions.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-restriction-behavior-all"]');
+    $element->click();
+    $assert_session->elementContains('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]', 'Unrestricted');
+    $page->pressButton('Save');
+
+    // Verify no restrictions.
+    $this->clickLink('Manage layout');
+    $element = $page->find('xpath', '//*[contains(@class, "layout--twocol-section")]/*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Promoted to front page');
+    $page->pressButton('Close');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout--twocol-section")]/*[contains(@class, "layout__region--second")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('Promoted to front page');
+    $page->pressButton('Close');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    // Add a restriction for all_regions.
+    $this->drupalGet("$field_ui_prefix/display/default");
+
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-twocol-section-table"]/tbody/tr[@data-region="all_regions"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+
+    $element = $page->find('xpath', '//*[contains(@class, "form-item-allowed-blocks-content-fields-restriction")]/input[@value="whitelisted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    // Verify restrictions applied to both regions.
+    $this->clickLink('Manage layout');
+    $element = $page->find('xpath', '//*[contains(@class, "layout--twocol-section")]/*[contains(@class, "layout__region--first")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Promoted to front page');
+    $page->pressButton('Close');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $element = $page->find('xpath', '//*[contains(@class, "layout--twocol-section")]/*[contains(@class, "layout__region--second")]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('Promoted to front page');
+    $page->pressButton('Close');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $page->pressButton('Save');
+  }
+
+  /**
+   * Verify that the UI can restrict layouts in Layout Builder settings tray.
+   */
+  public function testLayoutRestriction() {
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+    $field_ui_prefix = 'admin/structure/types/manage/bundle_with_section_field';
+    $this->drupalGet("$field_ui_prefix/display/default");
+    // Checking is_enable will show allow_custom.
+    $page->checkField('layout[enabled]');
+    $page->checkField('layout[allow_custom]');
+    $page->pressButton('Save');
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+    // Baseline: 'One column' & 'Two column' layouts are available.
+    $assert_session->elementExists('css', '.field--name-body');
+    $this->clickLink('Add section');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkExists('One column');
+    $assert_session->linkExists('Two column');
+
+    // Allow only 'Two column' layout.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-all"]');
+    $assert_session->checkboxChecked('edit-layout-builder-restrictions-allowed-layouts-layout-restriction-all');
+    $assert_session->checkboxNotChecked('edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted');
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+    $page->pressButton('Save');
+
+    // Verify 'Two column' is allowed, 'One column' restricted.
+    $this->drupalGet("$field_ui_prefix/display/default");
+    $assert_session->linkExists('Manage layout');
+    $this->clickLink('Manage layout');
+    $assert_session->addressEquals("$field_ui_prefix/display/default/layout");
+    $this->clickLink('Add section');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->linkNotExists('One column');
+    $assert_session->linkExists('Two column');
+  }
+
+  /**
+   * Helper function to set up block restriction-related tests.
+   */
+  protected function blockTestSetup() {
+    // Create 2 custom block types, with 3 block instances.
+    $bundle = BlockContentType::create([
+      'id' => 'basic',
+      'label' => 'Basic',
+    ]);
+    $bundle->save();
+    $bundle = BlockContentType::create([
+      'id' => 'alternate',
+      'label' => 'Alternate',
+    ]);
+    $bundle->save();
+    block_content_add_body_field($bundle->id());
+    $blocks = [
+      'Basic Block 1' => 'basic',
+      'Basic Block 2' => 'basic',
+      'Alternate Block 1' => 'alternate',
+    ];
+    foreach ($blocks as $info => $type) {
+      $block = BlockContent::create([
+        'info' => $info,
+        'type' => $type,
+        'body' => [
+          [
+            'value' => 'This is the block content',
+            'format' => filter_default_format(),
+          ],
+        ],
+      ]);
+      $block->save();
+      $blocks[$info] = $block->uuid();
+    }
+    $this->blocks = $blocks;
+  }
+
+}
diff --git a/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/MoveBlockBlacklistTest.php b/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/MoveBlockBlacklistTest.php
new file mode 100644
index 0000000..c3f0617
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/MoveBlockBlacklistTest.php
@@ -0,0 +1,270 @@
+<?php
+
+namespace Drupal\Tests\layout_builder_restrictions_by_region\FunctionalJavascript;
+
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
+use Drupal\layout_library\Entity\Layout;
+use Drupal\Tests\layout_builder_restrictions\Traits\MoveBlockHelperTrait;
+
+/**
+ * Tests moving blocks via the form.
+ *
+ * @group layout_builder_restrictions_by_region
+ */
+class MoveBlockBlacklistTest extends WebDriverTestBase {
+
+  use ContentTypeCreationTrait;
+  use MoveBlockHelperTrait;
+
+  /**
+   * Path prefix for the field UI for the test bundle.
+   *
+   * @var string
+   */
+  const FIELD_UI_PREFIX = 'admin/structure/types/manage/bundle_with_section_field';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'block',
+    'contextual',
+    'node',
+    'layout_builder',
+    'layout_library',
+    'layout_builder_restrictions',
+    'layout_builder_restrictions_by_region',
+  ];
+
+  /**
+   * Specify the theme to be used in testing.
+   *
+   * @var string
+   */
+  protected $defaultTheme = 'classy';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    $this->createContentType(['type' => 'bundle_with_section_field']);
+
+    $this->drupalLogin($this->drupalCreateUser([
+      'access administration pages',
+      'configure any layout',
+      'administer blocks',
+      'administer node display',
+      'administer node fields',
+      'access contextual links',
+    ]));
+
+    $layout = Layout::create([
+      'id' => 'alpha',
+      'label' => 'Alpha',
+      'targetEntityType' => 'node',
+      'targetBundle' => 'bundle_with_section_field',
+    ]);
+    $layout->save();
+
+    // Enable Layout Builder.
+    $this->drupalPostForm(
+      static::FIELD_UI_PREFIX . '/display/default',
+      ['layout[enabled]' => TRUE],
+      'Save'
+    );
+    $this->getSession()->resizeWindow(1200, 4000);
+
+    // Enable entity_view_mode_restriction_by_region plugin.
+    // Disable entity_view_mode_restriction plugin.
+    $layout_builder_restrictions_plugins = [
+      'entity_view_mode_restriction' => [
+        'weight' => 1,
+        'enabled' => FALSE,
+      ],
+      'entity_view_mode_restriction_by_region' => [
+        'weight' => 0,
+        'enabled' => TRUE,
+      ],
+    ];
+    $config = \Drupal::service('config.factory')->getEditable('layout_builder_restrictions.plugins');
+    $config->set('plugin_config', $layout_builder_restrictions_plugins)->save();
+  }
+
+  /**
+   * Tests moving a plugin block.
+   */
+  public function testMovePluginBlock() {
+    $page = $this->getSession()->getPage();
+    $assert_session = $this->assertSession();
+    $page->clickLink('Manage layout');
+    $assert_session->addressEquals(static::FIELD_UI_PREFIX . '/display/default/layout');
+    $expected_block_order = [
+      '.block-extra-field-blocknodebundle-with-section-fieldlinks',
+      '.block-field-blocknodebundle-with-section-fieldbody',
+    ];
+    $this->assertRegionBlocksOrder(0, 'content', $expected_block_order);
+
+    // Add a top section using the Two column layout.
+    $page->clickLink('Add section');
+    $assert_session->waitForElementVisible('css', '#drupal-off-canvas');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->clickLink('Two column');
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', 'input[value="Add section"]'));
+    $page->pressButton('Add section');
+    $this->assertRegionBlocksOrder(1, 'content', $expected_block_order);
+    // Add a 'Powered by Drupal' block in the 'first' region of the new section.
+    $first_region_block_locator = '[data-layout-delta="0"].layout--twocol-section [data-region="first"] [data-layout-block-uuid]';
+    $assert_session->elementNotExists('css', $first_region_block_locator);
+    $assert_session->elementExists('css', '[data-layout-delta="0"].layout--twocol-section [data-region="first"] .layout-builder__add-block')->click();
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', '#drupal-off-canvas a:contains("Powered by Drupal")'));
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->clickLink('Powered by Drupal');
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', 'input[value="Add block"]'));
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Add block');
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', $first_region_block_locator));
+
+    // Ensure the request has completed before the test starts.
+    $this->waitForNoElement('#drupal-off-canvas');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $page = $this->getSession()->getPage();
+    $assert_session = $this->assertSession();
+
+    // From the manage display page, go to manage the layout.
+    $this->drupalGet(static::FIELD_UI_PREFIX . "/display/default");
+    $assert_session->linkExists('Manage layout');
+
+    // Only allow one-column and two-column layouts.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-onecol"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+
+    // Add a block restriction after the fact to test basic restriction.
+    // Restrict all 'Content' fields from options.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol"]/summary');
+    $element->click();
+
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol-table"]/tbody/tr[@data-region="all_regions"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-allowed-blocks-content-fields-restriction-blacklisted--")]');
+    $element->click();
+    $content_fields = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-content-fields-allowed-blocks-")]');
+    foreach ($content_fields as $block) {
+      $block->click();
+    }
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $page->clickLink('Manage layout');
+    $expected_block_order_1 = [
+      '.block-extra-field-blocknodebundle-with-section-fieldlinks',
+      '.block-field-blocknodebundle-with-section-fieldbody',
+    ];
+    $this->assertRegionBlocksOrder(1, 'content', $expected_block_order_1);
+    $assert_session->addressEquals(static::FIELD_UI_PREFIX . '/display/default/layout');
+
+    // Attempt to reorder body field in current region.
+    $this->openMoveForm(1, 'content', 'block-field-blocknodebundle-with-section-fieldbody', ['Links', 'Body (current)']);
+    $this->moveBlockWithKeyboard('up', 'Body (current)', ['Body (current)*', 'Links']);
+    $page->pressButton('Move');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    // Verify that a validation error is provided.
+    $modal = $page->find('css', '#drupal-off-canvas p');
+    $this->assertSame("There is a restriction on Body placement in the layout_onecol all_regions region for bundle_with_section_field content.", trim($modal->getText()));
+
+    $dialog_div = $this->assertSession()->waitForElementVisible('css', 'div.ui-dialog');
+    $close_button = $dialog_div->findButton('Close');
+    $this->assertNotNull($close_button);
+    $close_button->press();
+
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $page->pressButton('Save layout');
+    $page->clickLink('Manage layout');
+    // The order should not have changed after save.
+    $this->assertRegionBlocksOrder(1, 'content', $expected_block_order_1);
+
+    $this->drupalGet(static::FIELD_UI_PREFIX . "/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-onecol"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol"]/summary');
+    $element->click();
+
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol-table"]/tbody/tr[@data-region="all_regions"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-content-fields-restriction-blacklisted--")]');
+    $element->click();
+    $content_fields = $page->findAll('xpath', '//*[starts-with(@id, "edit-allowed-blocks-content-fields-allowed-blocks-field-block")]');
+    foreach ($content_fields as $block) {
+      $block->click();
+    }
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    // Try an allowed move to another section.
+    // Move the body block to the First region of a two-column layout.
+    $this->drupalGet(static::FIELD_UI_PREFIX . "/display/default/layout");
+    $this->openMoveForm(1, 'content', 'block-field-blocknodebundle-with-section-fieldbody', ['Links', 'Body (current)']);
+    $page->selectFieldOption('Region', '0:first');
+    $this->assertBlockTable(['Powered by Drupal', 'Body (current)']);
+    $this->moveBlockWithKeyboard('up', 'Body', ['Body (current)*', 'Powered by Drupal']);
+    $page->pressButton('Move');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $expected_block_order_2 = [
+      '.block-field-blocknodebundle-with-section-fieldbody',
+      '.block-system-powered-by-block',
+    ];
+    $this->assertRegionBlocksOrder(0, 'first', $expected_block_order_2);
+
+    // Try an allowed move within a section.
+    // Move the body block to the Second region of a two-column layout.
+    $this->openMoveForm(0, 'first', 'block-field-blocknodebundle-with-section-fieldbody', ['Body (current)', 'Powered by Drupal']);
+    $page->selectFieldOption('Region', '0:second');
+    $this->assertBlockTable(['Body (current)']);
+    $page->pressButton('Move');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $expected_block_order_3 = [
+      '.block-field-blocknodebundle-with-section-fieldbody',
+    ];
+    $this->assertRegionBlocksOrder(0, 'second', $expected_block_order_3);
+
+    // Try a disallowed move to another section.
+    // Move the body block to the Content region of a one-column layout.
+    $this->openMoveForm(0, 'second', 'block-field-blocknodebundle-with-section-fieldbody', ['Body (current)']);
+    $page->selectFieldOption('Region', '1:content');
+    $this->assertBlockTable(['Links', 'Body (current)']);
+    $page->pressButton('Move');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $modal = $page->find('css', '#drupal-off-canvas p');
+    // Content cannot be moved between sections if a restriction exists.
+    $this->assertSame("There is a restriction on Body placement in the layout_onecol all_regions region for bundle_with_section_field content.", trim($modal->getText()));
+  }
+
+}
diff --git a/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/MoveBlockWhitelistTest.php b/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/MoveBlockWhitelistTest.php
new file mode 100644
index 0000000..905eaab
--- /dev/null
+++ b/modules/layout_builder_restrictions_by_region/tests/src/FunctionalJavascript/MoveBlockWhitelistTest.php
@@ -0,0 +1,262 @@
+<?php
+
+namespace Drupal\Tests\layout_builder_restrictions_by_region\FunctionalJavascript;
+
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
+use Drupal\layout_library\Entity\Layout;
+use Drupal\Tests\layout_builder_restrictions\Traits\MoveBlockHelperTrait;
+
+/**
+ * Tests moving blocks via the form.
+ *
+ * @group layout_builder_restrictions_by_region
+ */
+class MoveBlockWhitelistTest extends WebDriverTestBase {
+
+  use ContentTypeCreationTrait;
+  use MoveBlockHelperTrait;
+
+  /**
+   * Path prefix for the field UI for the test bundle.
+   *
+   * @var string
+   */
+  const FIELD_UI_PREFIX = 'admin/structure/types/manage/bundle_with_section_field';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'block',
+    'contextual',
+    'node',
+    'layout_builder',
+    'layout_library',
+    'layout_builder_restrictions',
+    'layout_builder_restrictions_by_region',
+  ];
+
+  /**
+   * Specify the theme to be used in testing.
+   *
+   * @var string
+   */
+  protected $defaultTheme = 'classy';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    $this->createContentType(['type' => 'bundle_with_section_field']);
+
+    $this->drupalLogin($this->drupalCreateUser([
+      'access administration pages',
+      'configure any layout',
+      'administer blocks',
+      'administer node display',
+      'administer node fields',
+      'access contextual links',
+    ]));
+
+    $layout = Layout::create([
+      'id' => 'alpha',
+      'label' => 'Alpha',
+      'targetEntityType' => 'node',
+      'targetBundle' => 'bundle_with_section_field',
+    ]);
+    $layout->save();
+
+    // Enable Layout Builder.
+    $this->drupalPostForm(
+      static::FIELD_UI_PREFIX . '/display/default',
+      ['layout[enabled]' => TRUE],
+      'Save'
+    );
+    $this->getSession()->resizeWindow(1200, 4000);
+
+    // Enable entity_view_mode_restriction_by_region plugin.
+    // Disable entity_view_mode_restriction plugin.
+    $layout_builder_restrictions_plugins = [
+      'entity_view_mode_restriction' => [
+        'weight' => 1,
+        'enabled' => FALSE,
+      ],
+      'entity_view_mode_restriction_by_region' => [
+        'weight' => 0,
+        'enabled' => TRUE,
+      ],
+    ];
+    $config = \Drupal::service('config.factory')->getEditable('layout_builder_restrictions.plugins');
+    $config->set('plugin_config', $layout_builder_restrictions_plugins)->save();
+  }
+
+  /**
+   * Tests moving a plugin block.
+   */
+  public function testMovePluginBlock() {
+    $page = $this->getSession()->getPage();
+    $assert_session = $this->assertSession();
+    $page->clickLink('Manage layout');
+    $assert_session->addressEquals(static::FIELD_UI_PREFIX . '/display/default/layout');
+    $expected_block_order = [
+      '.block-extra-field-blocknodebundle-with-section-fieldlinks',
+      '.block-field-blocknodebundle-with-section-fieldbody',
+    ];
+    $this->assertRegionBlocksOrder(0, 'content', $expected_block_order);
+
+    // Add a top section using the Two column layout.
+    $page->clickLink('Add section');
+    $assert_session->waitForElementVisible('css', '#drupal-off-canvas');
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->clickLink('Two column');
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', 'input[value="Add section"]'));
+    $page->pressButton('Add section');
+    $this->assertRegionBlocksOrder(1, 'content', $expected_block_order);
+    // Add a 'Powered by Drupal' block in the 'first' region of the new section.
+    $first_region_block_locator = '[data-layout-delta="0"].layout--twocol-section [data-region="first"] [data-layout-block-uuid]';
+    $assert_session->elementNotExists('css', $first_region_block_locator);
+    $assert_session->elementExists('css', '[data-layout-delta="0"].layout--twocol-section [data-region="first"] .layout-builder__add-block')->click();
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', '#drupal-off-canvas a:contains("Powered by Drupal")'));
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->clickLink('Powered by Drupal');
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', 'input[value="Add block"]'));
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Add block');
+    $this->assertNotEmpty($assert_session->waitForElementVisible('css', $first_region_block_locator));
+
+    // Ensure the request has completed before the test starts.
+    $this->waitForNoElement('#drupal-off-canvas');
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $page = $this->getSession()->getPage();
+    $assert_session = $this->assertSession();
+
+    // From the manage display page, go to manage the layout.
+    $this->drupalGet(static::FIELD_UI_PREFIX . "/display/default");
+    $assert_session->linkExists('Manage layout');
+
+    // Only allow one-column and two-column layouts.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-onecol"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+
+    // Add a block restriction after the fact to test basic restriction.
+    // Restrict all 'Content' fields from options.
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol"]/summary');
+    $element->click();
+
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol-table"]/tbody/tr[@data-region="all_regions"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-allowed-blocks-content-fields-restriction-whitelisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    $page->clickLink('Manage layout');
+    $expected_block_order_1 = [
+      '.block-extra-field-blocknodebundle-with-section-fieldlinks',
+      '.block-field-blocknodebundle-with-section-fieldbody',
+    ];
+    $this->assertRegionBlocksOrder(1, 'content', $expected_block_order_1);
+    $assert_session->addressEquals(static::FIELD_UI_PREFIX . '/display/default/layout');
+
+    // Attempt to reorder body field in current region.
+    $this->openMoveForm(1, 'content', 'block-field-blocknodebundle-with-section-fieldbody', ['Links', 'Body (current)']);
+    $this->moveBlockWithKeyboard('up', 'Body (current)', ['Body (current)*', 'Links']);
+    $page->pressButton('Move');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    // Verify that a validation error is provided.
+    $modal = $page->find('css', '#drupal-off-canvas p');
+    $this->assertSame("There is a restriction on Body placement in the layout_onecol all_regions region for bundle_with_section_field content.", trim($modal->getText()));
+
+    $dialog_div = $this->assertSession()->waitForElementVisible('css', 'div.ui-dialog');
+    $close_button = $dialog_div->findButton('Close');
+    $this->assertNotNull($close_button);
+    $close_button->press();
+
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $page->pressButton('Save layout');
+    $page->clickLink('Manage layout');
+    // The order should not have changed after save.
+    $this->assertRegionBlocksOrder(1, 'content', $expected_block_order_1);
+
+    $this->drupalGet(static::FIELD_UI_PREFIX . "/display/default");
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts"]/summary');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layout-restriction-restricted"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-twocol-section"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-layouts-layouts-layout-onecol"]');
+    $element->click();
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol"]/summary');
+    $element->click();
+
+    $element = $page->find('xpath', '//*[@id="edit-layout-builder-restrictions-allowed-blocks-by-layout-layout-onecol-table"]/tbody/tr[@data-region="all_regions"]//a');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+
+    $assert_session->checkboxChecked('Allow all existing & new Content fields blocks.');
+    $assert_session->checkboxNotChecked('Allow specific Content fields blocks (whitelist):');
+    $element = $page->find('xpath', '//*[starts-with(@id, "edit-allowed-blocks-content-fields-restriction-whitelisted--")]');
+    $element->click();
+    $element = $page->find('xpath', '//*[starts-with(@id,"edit-submit--")]');
+    $element->click();
+    $assert_session->assertWaitOnAjaxRequest();
+    $page->pressButton('Save');
+
+    // Try an allowed move to another section.
+    // Move the body block to the First region of a two-column layout.
+    $this->drupalGet(static::FIELD_UI_PREFIX . "/display/default/layout");
+    $this->openMoveForm(1, 'content', 'block-field-blocknodebundle-with-section-fieldbody', ['Links', 'Body (current)']);
+    $page->selectFieldOption('Region', '0:first');
+    $this->assertBlockTable(['Powered by Drupal', 'Body (current)']);
+    $this->moveBlockWithKeyboard('up', 'Body', ['Body (current)*', 'Powered by Drupal']);
+    $page->pressButton('Move');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $expected_block_order_2 = [
+      '.block-field-blocknodebundle-with-section-fieldbody',
+      '.block-system-powered-by-block',
+    ];
+    $this->assertRegionBlocksOrder(0, 'first', $expected_block_order_2);
+
+    // Try an allowed move within a section.
+    // Move the body block to the Second region of a two-column layout.
+    $this->openMoveForm(0, 'first', 'block-field-blocknodebundle-with-section-fieldbody', ['Body (current)', 'Powered by Drupal']);
+    $page->selectFieldOption('Region', '0:second');
+    $this->assertBlockTable(['Body (current)']);
+    $page->pressButton('Move');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $expected_block_order_3 = [
+      '.block-field-blocknodebundle-with-section-fieldbody',
+    ];
+    $this->assertRegionBlocksOrder(0, 'second', $expected_block_order_3);
+
+    // Try a disallowed move to another section.
+    // Move the body block to the Content region of a one-column layout.
+    $this->openMoveForm(0, 'second', 'block-field-blocknodebundle-with-section-fieldbody', ['Body (current)']);
+    $page->selectFieldOption('Region', '1:content');
+    $this->assertBlockTable(['Links', 'Body (current)']);
+    $page->pressButton('Move');
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $modal = $page->find('css', '#drupal-off-canvas p');
+    // Content cannot be moved between sections if a restriction exists.
+    $this->assertSame("There is a restriction on Body placement in the layout_onecol all_regions region for bundle_with_section_field content.", trim($modal->getText()));
+  }
+
+}
diff --git a/src/Form/FormAlter.php b/src/Form/FormAlter.php
index 1ece6cc..1628e2e 100644
--- a/src/Form/FormAlter.php
+++ b/src/Form/FormAlter.php
@@ -114,7 +114,7 @@ class FormAlter implements ContainerInjectionInterface {
       // Block settings.
       $form['layout']['layout_builder_restrictions']['allowed_blocks'] = [
         '#type' => 'details',
-        '#title' => $this->t('Blocks available for placement'),
+        '#title' => $this->t('Blocks available for placement (all layouts & regions)'),
         '#states' => [
           'disabled' => [
             ':input[name="layout[enabled]"]' => ['checked' => FALSE],
diff --git a/src/Plugin/LayoutBuilderRestriction/EntityViewModeRestriction.php b/src/Plugin/LayoutBuilderRestriction/EntityViewModeRestriction.php
index e718b5e..6134db4 100644
--- a/src/Plugin/LayoutBuilderRestriction/EntityViewModeRestriction.php
+++ b/src/Plugin/LayoutBuilderRestriction/EntityViewModeRestriction.php
@@ -283,9 +283,11 @@ class EntityViewModeRestriction extends LayoutBuilderRestrictionBase {
     else {
       $inline_blocks = $this->getInlineBlockPlugins();
       if (isset($blacklisted_blocks['Inline blocks'])) {
-        foreach ($blacklisted_blocks['Inline blocks'] as $block) {
+        foreach ($inline_blocks as $key => $block) {
           // Unset explicitly blacklisted inline blocks.
-          unset($inline_blocks[$block]);
+          if (in_array($block, $blacklisted_blocks['Inline blocks'])) {
+            unset($inline_blocks[$key]);
+          }
         }
       }
       return $inline_blocks;
diff --git a/tests/src/FunctionalJavascript/MoveBlockRestrictionTest.php b/tests/src/FunctionalJavascript/MoveBlockRestrictionTest.php
index fda6cb6..9e9fb4a 100644
--- a/tests/src/FunctionalJavascript/MoveBlockRestrictionTest.php
+++ b/tests/src/FunctionalJavascript/MoveBlockRestrictionTest.php
@@ -5,9 +5,9 @@ namespace Drupal\Tests\layout_builder_restrictions\FunctionalJavascript;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
-use Drupal\Tests\contextual\FunctionalJavascript\ContextualLinkClickTrait;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\layout_library\Entity\Layout;
+use Drupal\Tests\layout_builder_restrictions\Traits\MoveBlockHelperTrait;
 
 /**
  * Tests moving blocks via the form.
@@ -16,8 +16,8 @@ use Drupal\layout_library\Entity\Layout;
  */
 class MoveBlockRestrictionTest extends WebDriverTestBase {
 
-  use ContextualLinkClickTrait;
   use ContentTypeCreationTrait;
+  use MoveBlockHelperTrait;
 
   /**
    * Path prefix for the field UI for the test bundle.
@@ -449,129 +449,4 @@ class MoveBlockRestrictionTest extends WebDriverTestBase {
 
   }
 
-  /**
-   * Asserts the correct block labels appear in the draggable tables.
-   *
-   * @param string[] $expected_block_labels
-   *   The expected block labels.
-   */
-  protected function assertBlockTable(array $expected_block_labels) {
-    $page = $this->getSession()->getPage();
-    $this->assertSession()->assertWaitOnAjaxRequest();
-    $block_tds = $page->findAll('css', '.layout-builder-components-table__block-label');
-    $this->assertCount(count($block_tds), $expected_block_labels);
-    /** @var \Behat\Mink\Element\NodeElement $block_td */
-    foreach ($block_tds as $block_td) {
-      $this->assertSame(array_shift($expected_block_labels), trim($block_td->getText()));
-    }
-  }
-
-  /**
-   * Waits for an element to be removed from the page.
-   *
-   * @param string $selector
-   *   CSS selector.
-   * @param int $timeout
-   *   (optional) Timeout in milliseconds, defaults to 10000.
-   *
-   * @todo Remove in https://www.drupal.org/node/2892440.
-   */
-  protected function waitForNoElement($selector, $timeout = 10000) {
-    $condition = "(typeof jQuery !== 'undefined' && jQuery('$selector').length === 0)";
-    $this->assertJsCondition($condition, $timeout);
-  }
-
-  /**
-   * Moves a block in the draggable table.
-   *
-   * @param string $direction
-   *   The direction to move the block in the table.
-   * @param string $block_label
-   *   The block label.
-   * @param array $updated_blocks
-   *   The updated blocks order.
-   */
-  protected function moveBlockWithKeyboard($direction, $block_label, array $updated_blocks) {
-    $keys = [
-      'up' => 38,
-      'down' => 40,
-    ];
-    $key = $keys[$direction];
-    $handle = $this->findRowHandle($block_label);
-
-    $handle->keyDown($key);
-    $handle->keyUp($key);
-
-    $handle->blur();
-    $this->assertBlockTable($updated_blocks);
-  }
-
-  /**
-   * Finds the row handle for a block in the draggable table.
-   *
-   * @param string $block_label
-   *   The block label.
-   *
-   * @return \Behat\Mink\Element\NodeElement
-   *   The row handle element.
-   */
-  protected function findRowHandle($block_label) {
-    $assert_session = $this->assertSession();
-    return $assert_session->elementExists('css', "[data-drupal-selector=\"edit-components\"] td:contains(\"$block_label\") a.tabledrag-handle");
-  }
-
-  /**
-   * Asserts that blocks are in the correct order for a region.
-   *
-   * @param int $section_delta
-   *   The section delta.
-   * @param string $region
-   *   The region.
-   * @param array $expected_block_selectors
-   *   The block selectors.
-   */
-  protected function assertRegionBlocksOrder($section_delta, $region, array $expected_block_selectors) {
-    $page = $this->getSession()->getPage();
-    $assert_session = $this->assertSession();
-
-    $assert_session->assertWaitOnAjaxRequest();
-    $this->waitForNoElement('#drupal-off-canvas');
-
-    $region_selector = "[data-layout-delta=\"$section_delta\"] [data-region=\"$region\"]";
-
-    // Get all blocks currently in the region.
-    $blocks = $page->findAll('css', "$region_selector [data-layout-block-uuid]");
-    $this->assertCount(count($expected_block_selectors), $blocks);
-
-    /** @var \Behat\Mink\Element\NodeElement $block */
-    foreach ($blocks as $block) {
-      $block_selector = array_shift($expected_block_selectors);
-      $assert_session->elementsCount('css', "$region_selector $block_selector", 1);
-      $expected_block = $page->find('css', "$region_selector $block_selector");
-      $this->assertSame($expected_block->getAttribute('data-layout-block-uuid'), $block->getAttribute('data-layout-block-uuid'));
-    }
-  }
-
-  /**
-   * Open block for the body field.
-   *
-   * @param int $delta
-   *   The section delta where the field should be.
-   * @param string $region
-   *   The region where the field should be.
-   * @param string $field
-   *   The field class that should be targeted.
-   * @param array $initial_blocks
-   *   The initial blocks that should be shown in the draggable table.
-   */
-  protected function openMoveForm($delta, $region, $field, array $initial_blocks) {
-    $assert_session = $this->assertSession();
-    $body_field_locator = "[data-layout-delta=\"$delta\"] [data-region=\"$region\"] ." . $field;
-    $this->clickContextualLink($body_field_locator, 'Move');
-    $assert_session->assertWaitOnAjaxRequest();
-    $this->assertNotEmpty($assert_session->waitForElementVisible('named', ['select', 'Region']));
-    $assert_session->fieldValueEquals('Region', "$delta:$region");
-    $this->assertBlockTable($initial_blocks);
-  }
-
 }
diff --git a/tests/src/Traits/MoveBlockHelperTrait.php b/tests/src/Traits/MoveBlockHelperTrait.php
new file mode 100644
index 0000000..8cea9a6
--- /dev/null
+++ b/tests/src/Traits/MoveBlockHelperTrait.php
@@ -0,0 +1,139 @@
+<?php
+
+namespace Drupal\Tests\layout_builder_restrictions\Traits;
+
+use Drupal\Tests\contextual\FunctionalJavascript\ContextualLinkClickTrait;
+
+/**
+ * General-purpose methods for moving blocks in Layout Builder.
+ */
+trait MoveBlockHelperTrait {
+
+  use ContextualLinkClickTrait;
+
+  /**
+   * Asserts the correct block labels appear in the draggable tables.
+   *
+   * @param string[] $expected_block_labels
+   *   The expected block labels.
+   */
+  protected function assertBlockTable(array $expected_block_labels) {
+    $page = $this->getSession()->getPage();
+    $this->assertSession()->assertWaitOnAjaxRequest();
+    $block_tds = $page->findAll('css', '.layout-builder-components-table__block-label');
+    $this->assertCount(count($block_tds), $expected_block_labels);
+    /** @var \Behat\Mink\Element\NodeElement $block_td */
+    foreach ($block_tds as $block_td) {
+      $this->assertSame(array_shift($expected_block_labels), trim($block_td->getText()));
+    }
+  }
+
+  /**
+   * Waits for an element to be removed from the page.
+   *
+   * @param string $selector
+   *   CSS selector.
+   * @param int $timeout
+   *   (optional) Timeout in milliseconds, defaults to 10000.
+   *
+   * @todo Remove in https://www.drupal.org/node/2892440.
+   */
+  protected function waitForNoElement($selector, $timeout = 10000) {
+    $condition = "(typeof jQuery !== 'undefined' && jQuery('$selector').length === 0)";
+    $this->assertJsCondition($condition, $timeout);
+  }
+
+  /**
+   * Moves a block in the draggable table.
+   *
+   * @param string $direction
+   *   The direction to move the block in the table.
+   * @param string $block_label
+   *   The block label.
+   * @param array $updated_blocks
+   *   The updated blocks order.
+   */
+  protected function moveBlockWithKeyboard($direction, $block_label, array $updated_blocks) {
+    $keys = [
+      'up' => 38,
+      'down' => 40,
+    ];
+    $key = $keys[$direction];
+    $handle = $this->findRowHandle($block_label);
+
+    $handle->keyDown($key);
+    $handle->keyUp($key);
+
+    $handle->blur();
+    $this->assertBlockTable($updated_blocks);
+  }
+
+  /**
+   * Finds the row handle for a block in the draggable table.
+   *
+   * @param string $block_label
+   *   The block label.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The row handle element.
+   */
+  protected function findRowHandle($block_label) {
+    $assert_session = $this->assertSession();
+    return $assert_session->elementExists('css', "[data-drupal-selector=\"edit-components\"] td:contains(\"$block_label\") a.tabledrag-handle");
+  }
+
+  /**
+   * Asserts that blocks are in the correct order for a region.
+   *
+   * @param int $section_delta
+   *   The section delta.
+   * @param string $region
+   *   The region.
+   * @param array $expected_block_selectors
+   *   The block selectors.
+   */
+  protected function assertRegionBlocksOrder($section_delta, $region, array $expected_block_selectors) {
+    $page = $this->getSession()->getPage();
+    $assert_session = $this->assertSession();
+
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->waitForNoElement('#drupal-off-canvas');
+
+    $region_selector = "[data-layout-delta=\"$section_delta\"] [data-region=\"$region\"]";
+
+    // Get all blocks currently in the region.
+    $blocks = $page->findAll('css', "$region_selector [data-layout-block-uuid]");
+    $this->assertCount(count($expected_block_selectors), $blocks);
+
+    /** @var \Behat\Mink\Element\NodeElement $block */
+    foreach ($blocks as $block) {
+      $block_selector = array_shift($expected_block_selectors);
+      $assert_session->elementsCount('css', "$region_selector $block_selector", 1);
+      $expected_block = $page->find('css', "$region_selector $block_selector");
+      $this->assertSame($expected_block->getAttribute('data-layout-block-uuid'), $block->getAttribute('data-layout-block-uuid'));
+    }
+  }
+
+  /**
+   * Open block for the body field.
+   *
+   * @param int $delta
+   *   The section delta where the field should be.
+   * @param string $region
+   *   The region where the field should be.
+   * @param string $field
+   *   The field class that should be targeted.
+   * @param array $initial_blocks
+   *   The initial blocks that should be shown in the draggable table.
+   */
+  protected function openMoveForm($delta, $region, $field, array $initial_blocks) {
+    $assert_session = $this->assertSession();
+    $body_field_locator = "[data-layout-delta=\"$delta\"] [data-region=\"$region\"] ." . $field;
+    $this->clickContextualLink($body_field_locator, 'Move');
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->assertNotEmpty($assert_session->waitForElementVisible('named', ['select', 'Region']));
+    $assert_session->fieldValueEquals('Region', "$delta:$region");
+    $this->assertBlockTable($initial_blocks);
+  }
+
+}
