<?php

/**
 * @file
 * This is the module provides media functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;
use Drupal\unl_utility\UNLUtilityTrait;

/**
 * Implements hook_form_alter().
 */
function unl_media_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Alter media edit forms: media_BUNDLE_edit_form.
  // Media edit forms have unique form id's.
  $media_edit_form_ids = [
    'media_file_edit_form',
    'media_image_edit_form',
    'media_remote_video_edit_form',
  ];
  if (in_array($form_id, $media_edit_form_ids)) {
    // Get entity ID to pass to view.
    $entity = UNLUtilityTrait::getRouteEntity();
    $entity_id = $entity->id();

    $form['media_metadata'] = [
      '#type' => 'details',
      '#title' => t('Media Metadata'),
      '#group' => 'advanced',
      '#weight' => 99,
      '#attributes' => [
        'class' => ['media-metadata'],
      ],
    ];
    $form['#attached']['library'][] = 'unl_media/media_metadata';

    switch ($form_id) {
      case ('media_file_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'file', $entity_id)),
        ];
        break;

      case ('media_image_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'image', $entity_id)),
        ];
        break;

      case ('media_remote_video_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'remote_video', $entity_id)),
        ];
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function unl_media_form_editor_link_dialog_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Replace default help text.
  $form['attributes']['href']['#description'] = t('<Link options:<br><strong>Local content and existing documents:</strong> Start typing to select an autocomplete option<br><strong>New document:</strong> <a href="@file_url" target="_blank">Upload a new document</a><br><strong>External URLs:</strong> Type full URL', ['@file_url' => '/media/add/file']);
}

/**
 * Implements hook_entity_embed_display_plugins_for_context_alter().
 */
function unl_media_entity_embed_display_plugins_for_context_alter(array &$definitions, array $contexts) {
  // Do nothing if no entity is provided.
  if (!isset($contexts['entity'])) {
    return;
  }
  $entity = $contexts['entity'];

  // For video, limit the available options to the media player.
  if ($entity instanceof Media && in_array($entity->bundle(), ['remote_video'])) {
    $definitions = array_intersect_key($definitions, array_flip(['view_mode:media.remote_video']));
  }

  // For images, limit the available options to the media player.
  if ($entity instanceof Media && in_array($entity->bundle(), ['image'])) {
    $definitions = array_intersect_key($definitions, array_flip(['view_mode:media.narrow', 'view_mode:media.wide']));
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function unl_media_form_entity_embed_dialog_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $storage = $form_state->getStorage();

  // The 'entity_embed_dialog' form is a multi-step form.
  if ($storage['step'] == 'embed') {
    $bundle = $storage['entity']->bundle();

    if ($bundle == 'image') {
      $form['attributes']['data-align']['#states'] = [
        'visible' => [
          ':input[name="attributes[data-entity-embed-display]"]' => ['value' => 'view_mode:media.narrow'],
        ],
      ];
    }
    elseif ($bundle == 'remote_video') {
      // Videos are always 100% side.
      unset($form['attributes']['data-align']);
    }
  }

  $form['#validate'][] = '_unl_media_entity_embed_dialog_validate';
}

/**
 * Validation function for the 'entity_embed_dialog' form.
 */
function _unl_media_entity_embed_dialog_validate($form, FormStateInterface &$form_state) {
  $storage = $form_state->getStorage();
  $values = $form_state->getValues();

  // The 'entity_embed_dialog' form is a multi-step form.
  if ($storage['step'] == 'embed') {
    $bundle = $storage['entity']->bundle();

    if ($bundle == 'image') {
      // If view mode is set to 'wide', then unset data-align.
      if ($values['attributes']['data-entity-embed-display'] == 'view_mode:media.wide') {
        $form_state->setValue(['attributes', 'data-align'], '');
      }
    }
  }
}

/**
 * Implements template_preprocess_filter_caption().
 */
function unl_media_preprocess_filter_caption(&$variables) {
  // For <drupal-entity> elements rendered with captions, get the view
  // mode and add a corresponding class to the <figure> element.
  //
  // Convert the markup to a DOM element.
  $element_string = $variables['node']->__toString();
  $dom = new DOMDocument();
  @$dom->loadHTML($element_string);
  // Only proceed if element is <drupal-entity>.
  $element = $dom->getElementsByTagName("drupal-entity");
  if (method_exists($element,'count') && $element->count() != 0) {
    $element = $element->item(0);
    $embed_display = $element->getAttribute('data-entity-embed-display');

    // Get view mode from embed display string.
    $embed_display_parts = explode('.', $embed_display);
    $variables['classes'] = trim($variables['classes'] . ' figure-embedded-entity view-mode--' . $embed_display_parts[1]);
  }

}

/**
 * Implements template_preprocess_entity_embed_container().
 */
function unl_media_preprocess_entity_embed_container(&$variables) {
  // Add the view mode as a class to the entity embed container.
  if (isset($variables['element']['entity']['#view_mode'])) {
    $variables['attributes']['class'][] = 'view-mode--' . $variables['element']['entity']['#view_mode'];
  }
}
