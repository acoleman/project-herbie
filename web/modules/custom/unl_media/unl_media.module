<?php

/**
 * @file
 * This is the module provides media functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;

/**
 * Implements hook_entity_embed_display_plugins_for_context_alter().
 */
function unl_media_entity_embed_display_plugins_for_context_alter(array &$definitions, array $contexts) {
  // Do nothing if no entity is provided.
  if (!isset($contexts['entity'])) {
    return;
  }
  $entity = $contexts['entity'];

  // For video, limit the available options to the media player.
  if ($entity instanceof Media && in_array($entity->bundle(), ['remote_video'])) {
    $definitions = array_intersect_key($definitions, array_flip(['view_mode:media.remote_video']));
  }

  // For images, limit the available options to the media player.
  if ($entity instanceof Media && in_array($entity->bundle(), ['image'])) {
    $definitions = array_intersect_key($definitions, array_flip(['view_mode:media.narrow', 'view_mode:media.wide']));
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function unl_media_form_entity_embed_dialog_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $storage = $form_state->getStorage();
  $bundle = $storage['entity']->bundle();

  // The 'entity_embed_dialog' form is a multi-step form.
  if ($storage['step'] == 'embed') {
    if ($bundle == 'image') {
      $form['attributes']['data-align']['#states'] = [
        'visible' => [
          ':input[name="attributes[data-entity-embed-display]"]' => ['value' => 'view_mode:media.narrow'],
        ],
      ];
    }
    elseif ($bundle == 'remote_video') {
      // Videos are always 100% side.
      unset($form['attributes']['data-align']);
    }
  }

  $form['#validate'][] = '_unl_media_entity_embed_dialog_validate';
}

/**
 * Validation function for the 'entity_embed_dialog' form.
 */
function _unl_media_entity_embed_dialog_validate($form, FormStateInterface &$form_state) {
  $storage = $form_state->getStorage();
  $bundle = $storage['entity']->bundle();
  $values = $form_state->getValues();

  // The 'entity_embed_dialog' form is a multi-step form.
  if ($storage['step'] == 'embed') {
    if ($bundle == 'image') {
      // If view mode is set to 'wide', then unset data-align.
      if ($values['attributes']['data-entity-embed-display'] == 'view_mode:media.wide') {
        $form_state->setValue(['attributes', 'data-align'], '');
      }
    }
  }
}

/**
 * Implements template_preprocess_filter_caption().
 */
function unl_media_preprocess_filter_caption(&$variables) {
  // For <drupal-entity> elements rendered with captions, get the view
  // mode and add a corresponding class to the <figure> element.
  //
  // Convert the markup to a DOM element.
  $element_string = $variables['node']->__toString();
  $dom = new DOMDocument();
  $dom->loadHTML($element_string);
  // Only proceed if element is <drupal-entity>.
  $element = $dom->getElementsByTagName("drupal-entity");
  if ($element->count() != 0) {
    $element = $element->item(0);
    $embed_display = $element->getAttribute('data-entity-embed-display');

    // Get view mode from embed display string.
    $embed_display_parts = explode('.', $embed_display);
    $variables['classes'] = trim($variables['classes'] . ' figure-embedded-entity view-mode--' . $embed_display_parts[1]);
  }

}

/**
 * Implements template_preprocess_entity_embed_container().
 */
function unl_media_preprocess_entity_embed_container(&$variables) {
  // Add the view mode as a class to the entity embed container.
  if (isset($variables['element']['entity']['#view_mode'])) {
    $variables['attributes']['class'][] = 'view-mode--' . $variables['element']['entity']['#view_mode'];
  }
}
