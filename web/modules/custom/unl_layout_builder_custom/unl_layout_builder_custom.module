<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use \Drupal\field\Entity\FieldConfig;
use \Drupal\Core\Form\FormHelper;

/**
 * Implements hook_form_alter().
 */
function unl_layout_builder_custom_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{

  switch ($form_id) {
    case 'layout_builder_add_block':
    case 'layout_builder_update_block':
    case 'layout_builder_edit_block':

      $block_type = '';
      if (isset($form['settings']['block_form']['#block'])) {
        $block_type = $form['settings']['block_form']['#block']->bundle();
      }
      // Card.
      if ($block_type == 'card') {
        // Remove background settings - None - empty option.
        unset($form['layout_builder_style_background']['#empty_option']);
        // Set 'Cream' as the default.
        $form['layout_builder_style_background']['#default_value'] = ['block_background_style_light'];
      }
      if ($block_type == 'tandem') {
        //Create a callback function to '#process' so we can be able to alter form elements
        $form['settings']['block_form']['#process'][] = 'edit_tandem_block_form_elements';
      };

       // Add our LBS heading before style options.
      _unl_layout_builder_custom_add_lbs_heading($form);
      break;
    case 'layout_builder_configure_section':
      // Remove container settings - None - empty option.
      unset($form['layout_builder_style_container']['#empty_option']);

      // Set 'Standard wrapper' as the default only if a new section is added.
      if (isset($form['#attributes']['data-layout-builder-target-highlight-id'])) {
        $match = 'section-update';
        $is_update = substr($form['#attributes']['data-layout-builder-target-highlight-id'], 0, strlen($match)) === $match;
        if (!$is_update) {
          $form['layout_builder_style_container']['#default_value'] = ['section_margin_standard_wrapper'];
        }
      }

      // Add our LBS heading before style options.
      _unl_layout_builder_custom_add_lbs_heading($form);
      break;

    case 'fragment_region_item_layout_builder_form':
    case 'fragment_region_item_after_content_layout_builder_form':
    case 'node_page_layout_builder_form':
      $form['#attached']['library'][] = 'unl_layout_builder_custom/unl_layout_builder_custom.overrides';
      break;
  }
}

/**
 * edit_tandem_block_form_elements process callback function.
 */
function edit_tandem_block_form_elements(array $element, FormStateInterface $form_state) {
  if (isset($element['b_tandem_stack'])) {
    $element['b_tandem_stack']['widget']['#states'] =  array('visible' => array(
      'select[id="edit-settings-block-form-b-tandem-style"]' => array('value' => '2')
    ));

    $element['b_tandem_fade']['widget']['#states'] =  array('visible' => array(
      'select[id="edit-settings-block-form-b-tandem-style"]' => array('value' => '1')
    ));

    $element['b_tandem_buttons']['widget']['#states'] =  array('visible' => array(
      'select[id="edit-settings-block-form-b-tandem-add-buttons-or-links"]' => array('value' => 'buttons')
    ));

    $element['b_tandem_links']['widget']['#states'] =  array('visible' => array(
      'select[id="edit-settings-block-form-b-tandem-add-buttons-or-links"]' => array('value' => 'links')
    ));
  }
  return $element;
}



/**
 * Add an element to delineate the layout builder styles form section.
 */
function _unl_layout_builder_custom_add_lbs_heading(&$form) {
  $children = Element::children($form);

  $styles = array_filter($children, function ($v) {
    return (strpos($v, 'layout_builder_style_') === 0);
  });

  if (!empty($styles)) {
    $form['lbs_heading'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'layout-builder-style-heading',
        ],
      ],
      'markup' => [
        '#prefix' => '<span>',
        '#markup' => t('Display options'),
        '#suffix' => '</span>',
      ],
      '#weight' => 80,
    ];
  }
}

